{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a fully functional home inspector marketplace web application called \"Lumina\" that connects users with licensed home inspectors. The application features dual functionality: a client-facing directory for finding inspectors and an inspector-facing dashboard for managing requests. The system includes complete authentication with user roles (client/inspector), protected routes, and a live system where inspector signups immediately appear in the client directory. Users can create accounts, inspectors can manage profiles, and the platform facilitates real connections between clients and inspectors.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing with three main pages (landing, inspectors list, inspector profile)\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod for validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Data Storage**: Currently using in-memory storage with an abstraction layer (IStorage interface) for future database integration\n- **Development**: Hot reload with Vite middleware integration for seamless development experience\n- **API Structure**: RESTful API design with /api prefix routing\n\n## Data Layer\n- **Storage**: Hybrid localStorage system - shared storage for requests (persistent across accounts) and user-specific storage for profiles\n- **Schema**: TypeScript interfaces for type safety between frontend components\n- **Real-time Updates**: Inspector profiles created during signup immediately appear in client directory\n- **Data Structure**: Shared requests storage with user-specific profile storage for optimal data persistence\n- **Request Types**: Two distinct request types - open_request (visible to all inspectors) and client_request (visible only to targeted inspector)\n\n## Design System\n- **Component Library**: Custom implementation built on Radix UI primitives\n- **Styling**: Utility-first CSS with Tailwind, using CSS custom properties for theming\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n- **Accessibility**: ARIA compliance through Radix UI components\n\n## Development Workflow\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: Full TypeScript coverage across frontend, backend, and shared schemas\n- **Code Organization**: Monorepo structure with clear separation between client, server, and shared code\n- **Path Aliases**: Configured for clean imports (@/ for client, @shared/ for shared utilities)\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Router (Wouter)\n- **Backend**: Express.js with TypeScript support via tsx\n- **Build Tools**: Vite with React plugin and TypeScript support\n\n## UI and Styling\n- **Component Library**: Radix UI primitives for accessible, unstyled components\n- **Styling**: Tailwind CSS with PostCSS for processing\n- **Icons**: Lucide React for consistent iconography\n- **Utilities**: clsx and tailwind-merge for conditional styling\n\n## Data Management\n- **Database**: Neon Database (PostgreSQL) with Drizzle ORM\n- **Validation**: Zod for runtime type validation and schema definition\n- **State Management**: TanStack React Query for server state\n- **Forms**: React Hook Form with Hookform Resolvers\n\n## Development Tools\n- **TypeScript**: Full type safety across the application\n- **ESBuild**: For server-side bundling in production\n- **Date Handling**: date-fns for date manipulation\n- **Development**: Replit-specific plugins for enhanced development experience\n\n## Data Source\n- **Inspector Data**: Live system where inspector accounts create real profiles that appear in client directory\n- **Profile Management**: Inspectors can customize their profiles, specialties, service areas, and pricing\n- **User-Generated Content**: All inspector profiles come from actual user signups with customizable details\n- **Demo Accounts**: Available for testing (client_demo@example.com / inspector_demo@example.com with DemoPass123)\n- **Images**: Randomly assigned Unsplash photos for new inspector profiles","size_bytes":4604},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/auth/AuthProvider\";\nimport { ProtectedRoute } from \"@/auth/ProtectedRoute\";\nimport { RoleRoute } from \"@/auth/RoleRoute\";\nimport Landing from \"@/pages/landing\";\nimport Inspectors from \"@/pages/inspectors\";\nimport InspectorProfile from \"@/pages/inspector-profile\";\nimport PostRequest from \"@/pages/PostRequest\";\nimport RequestsList from \"@/pages/RequestsList\";\nimport RequestDetail from \"@/pages/RequestDetail\";\nimport InspectorDashboard from \"@/pages/InspectorDashboard\";\nimport MyRequests from \"@/pages/MyRequests\";\nimport Thanks from \"@/pages/Thanks\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport Account from \"@/pages/Account\";\nimport Forbidden from \"@/pages/Forbidden\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/inspectors\" component={Inspectors} />\n      <Route path=\"/inspectors/:id\" component={InspectorProfile} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/forbidden\" component={Forbidden} />\n      <Route path=\"/thanks\" component={Thanks} />\n      <Route path=\"/account\">\n        <ProtectedRoute><Account /></ProtectedRoute>\n      </Route>\n      <Route path=\"/post\">\n        <RoleRoute role=\"client\"><PostRequest /></RoleRoute>\n      </Route>\n      <Route path=\"/my-requests\">\n        <RoleRoute role=\"client\"><MyRequests /></RoleRoute>\n      </Route>\n      <Route path=\"/requests\">\n        <RoleRoute role=\"inspector\"><RequestsList /></RoleRoute>\n      </Route>\n      <Route path=\"/requests/:id\">\n        <RoleRoute role=\"inspector\"><RequestDetail /></RoleRoute>\n      </Route>\n      <Route path=\"/inspector\">\n        <RoleRoute role=\"inspector\"><InspectorDashboard /></RoleRoute>\n      </Route>\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2475},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(213.8 88.6% 53.5%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 11% 31%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 11% 46%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(159 74% 35%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(213.8 88.6% 53.5%);\n  --chart-1: hsl(213.8 88.6% 53.5%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(213.8 88.6% 53.5%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(213.8 88.6% 53.5%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(213.8 88.6% 53.5%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 1px 2px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 1px 2px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 2px 4px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 4px 6px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 8px 10px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(213.8 88.6% 53.5%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(159 74% 35%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(213.8 88.6% 53.5%);\n  --chart-1: hsl(213.8 88.6% 53.5%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(213.8 88.6% 53.5%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(213.8 88.6% 53.5%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(213.8 88.6% 53.5%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 1px 2px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 1px 2px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 2px 4px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 4px 6px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00), 0px 8px 10px -1px hsl(213.8 88.6% 53.5% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(213.8 88.6% 53.5% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4662},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/auth/AuthProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocalStore } from '@/store/localStore';\nimport { \n  AuthContextType, \n  AuthState, \n  User, \n  LoginCredentials, \n  SignupData, \n  Session \n} from './types';\nimport {\n  getSession,\n  setSession,\n  findUserById,\n  findUserByEmail,\n  addUser,\n  updateUser,\n  deleteUser,\n  hashPassword,\n  generateUserId,\n  clearAllUsers\n} from './storage';\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    loading: true\n  });\n  \n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { updateInspectorProfile, addInspectorProfile, removeInspectorProfile, setCurrentInspectorProfile } = useLocalStore();\n\n  // Initialize session on mount\n  useEffect(() => {\n    const initAuth = () => {\n      try {\n        const session = getSession();\n        if (session) {\n          const user = findUserById(session.userId);\n          if (user) {\n            setAuthState({ user, loading: false });\n          } else {\n            // Invalid session, clear it\n            setSession(null);\n            setAuthState({ user: null, loading: false });\n          }\n        } else {\n          setAuthState({ user: null, loading: false });\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        setAuthState({ user: null, loading: false });\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // Auto-load inspector profile when inspector logs in\n  useEffect(() => {\n    if (authState.user && authState.user.role === 'inspector') {\n      setCurrentInspectorProfile(authState.user.email);\n    }\n  }, [authState.user?.email, authState.user?.role]);\n\n  const login = async (credentials: LoginCredentials): Promise<User> => {\n    try {\n      const user = findUserByEmail(credentials.email);\n      if (!user) {\n        throw new Error('Invalid email or password');\n      }\n\n      const passwordHash = await hashPassword(credentials.password);\n      if (passwordHash !== user.passwordHash) {\n        throw new Error('Invalid email or password');\n      }\n\n      const session: Session = {\n        userId: user.id,\n        createdAt: new Date().toISOString()\n      };\n\n      setSession(session);\n      setAuthState({ user, loading: false });\n\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${user.name || user.email}`,\n      });\n\n      // Return user info so the component can handle redirect\n      return user;\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred during login\",\n        variant: \"destructive\"\n      });\n      throw error;\n    }\n  };\n\n  const signup = async (data: SignupData): Promise<void> => {\n    try {\n      // Check if user already exists\n      const existingUser = findUserByEmail(data.email);\n      if (existingUser) {\n        throw new Error('An account with this email already exists');\n      }\n\n      // Create new user\n      const passwordHash = await hashPassword(data.password);\n      const user: User = {\n        id: generateUserId(),\n        email: data.email,\n        passwordHash,\n        role: data.role,\n        name: data.name,\n        phone: data.phone,\n        createdAt: new Date().toISOString()\n      };\n\n      addUser(user);\n\n      // If inspector role, initialize inspector profile\n      if (data.role === 'inspector') {\n        const inspectorProfile = {\n          email: user.email,\n          displayName: data.name || user.email.split('@')[0],\n          serviceAreas: ['San Francisco Bay Area'],\n          specialties: [],\n          basePrice: 400,\n          phone: data.phone,\n          location: 'San Francisco, CA',\n          bio: `Professional home inspector with expertise in residential property assessments.`,\n          yearsExperience: 1,\n          certifications: ['State Licensed'],\n          rating: 5.0,\n          reviewCount: 0,\n          completedInspections: 0,\n          image: `https://images.unsplash.com/photo-${Math.random() > 0.5 ? '1560250097' : '1472099645'}-0b93528c311a?w=400&h=400&fit=crop&crop=face`,\n          verified: true,\n          availability: {\n            nextAvailable: 'This week',\n            responseTime: 'Within 4 hours',\n            timeSlots: [\n              { id: 'slot1', date: 'Mon Dec 30', startTime: '9:00 AM', endTime: '11:00 AM', available: true },\n              { id: 'slot2', date: 'Mon Dec 30', startTime: '2:00 PM', endTime: '4:00 PM', available: true },\n              { id: 'slot3', date: 'Tue Dec 31', startTime: '10:00 AM', endTime: '12:00 PM', available: true },\n              { id: 'slot4', date: 'Wed Jan 1', startTime: '1:00 PM', endTime: '3:00 PM', available: true },\n              { id: 'slot5', date: 'Thu Jan 2', startTime: '9:00 AM', endTime: '11:00 AM', available: true }\n            ]\n          },\n          contact: {\n            phone: data.phone || '(555) 123-4567',\n            email: user.email\n          },\n          insurance: '$1M Professional Liability'\n        };\n        updateInspectorProfile(inspectorProfile);\n        \n        // Also add to the public directory using the store function\n        addInspectorProfile(inspectorProfile);\n      }\n\n      // Create session\n      const session: Session = {\n        userId: user.id,\n        createdAt: new Date().toISOString()\n      };\n\n      setSession(session);\n      setAuthState({ user, loading: false });\n\n      toast({\n        title: \"Account Created!\",\n        description: `Welcome to Lumina, ${user.name || user.email}!`,\n      });\n\n      // Redirect based on role\n      if (user.role === 'client') {\n        setLocation('/inspectors');\n      } else {\n        setLocation('/requests');\n      }\n    } catch (error) {\n      toast({\n        title: \"Signup Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred during signup\",\n        variant: \"destructive\"\n      });\n      throw error;\n    }\n  };\n\n  const logout = (): void => {\n    setSession(null);\n    setAuthState({ user: null, loading: false });\n    \n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n    \n    setLocation('/');\n  };\n\n  const updateProfile = async (updates: Partial<Pick<User, 'name' | 'phone'>>): Promise<void> => {\n    if (!authState.user) {\n      throw new Error('No user logged in');\n    }\n\n    try {\n      updateUser(authState.user.id, updates);\n      const updatedUser = { ...authState.user, ...updates };\n      setAuthState({ user: updatedUser, loading: false });\n\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update profile\",\n        variant: \"destructive\"\n      });\n      throw error;\n    }\n  };\n\n  const deleteAccount = async (): Promise<void> => {\n    if (!authState.user) {\n      throw new Error('No user logged in');\n    }\n\n    try {\n      const userId = authState.user.id;\n      \n      // Remove user from auth storage\n      deleteUser(userId);\n      \n      // ALSO remove inspector profile if they have one\n      removeInspectorProfile(authState.user.email);\n      \n      // Clear session\n      setSession(null);\n      setAuthState({ user: null, loading: false });\n\n      toast({\n        title: \"Account Deleted\",\n        description: \"Your account has been permanently deleted.\",\n      });\n\n      // Redirect to landing page\n      setLocation('/');\n    } catch (error) {\n      toast({\n        title: \"Deletion Failed\",\n        description: error instanceof Error ? error.message : \"Failed to delete account\",\n        variant: \"destructive\"\n      });\n      throw error;\n    }\n  };\n\n  const contextValue: AuthContextType = {\n    ...authState,\n    login,\n    signup,\n    logout,\n    updateProfile,\n    deleteAccount\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":8553},"client/src/auth/ProtectedRoute.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from './AuthProvider';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect to login\n  }\n\n  return <>{children}</>;\n}","size_bytes":896},"client/src/auth/RoleRoute.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from './AuthProvider';\nimport { Role } from './types';\n\ninterface RoleRouteProps {\n  children: React.ReactNode;\n  role: Role;\n}\n\nexport function RoleRoute({ children, role }: RoleRouteProps) {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading) {\n      if (!user) {\n        setLocation('/login');\n      } else if (user.role !== role) {\n        setLocation('/forbidden');\n      }\n    }\n  }, [user, loading, role, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || user.role !== role) {\n    return null; // Will redirect\n  }\n\n  return <>{children}</>;\n}","size_bytes":1046},"client/src/auth/storage.ts":{"content":"import { User, Session } from './types';\n\nconst USERS_KEY = 'inspect_now_users';\nconst SESSION_KEY = 'inspect_now_session';\n\n// Password hashing using Web Crypto API\nexport async function hashPassword(password: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hash = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hash));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\n// User storage functions - start with empty data\nexport function getUsers(): User[] {\n  try {\n    const stored = localStorage.getItem(USERS_KEY);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Error reading users from localStorage:', error);\n    return [];\n  }\n}\n\nexport function saveUsers(users: User[]): void {\n  try {\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  } catch (error) {\n    console.error('Error saving users to localStorage:', error);\n  }\n}\n\nexport function findUserByEmail(email: string): User | undefined {\n  const users = getUsers();\n  return users.find(user => user.email.toLowerCase() === email.toLowerCase());\n}\n\nexport function findUserById(id: string): User | undefined {\n  const users = getUsers();\n  return users.find(user => user.id === id);\n}\n\nexport function addUser(user: User): void {\n  const users = getUsers();\n  users.push(user);\n  saveUsers(users);\n}\n\nexport function updateUser(userId: string, updates: Partial<User>): void {\n  const users = getUsers();\n  const index = users.findIndex(user => user.id === userId);\n  if (index !== -1) {\n    users[index] = { ...users[index], ...updates };\n    saveUsers(users);\n  }\n}\n\n// Session storage functions\nexport function getSession(): Session | null {\n  try {\n    const stored = localStorage.getItem(SESSION_KEY);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.error('Error reading session from localStorage:', error);\n    return null;\n  }\n}\n\nexport function setSession(session: Session | null): void {\n  try {\n    if (session) {\n      localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n    } else {\n      localStorage.removeItem(SESSION_KEY);\n    }\n  } catch (error) {\n    console.error('Error saving session to localStorage:', error);\n  }\n}\n\n// Generate unique ID\nexport function generateUserId(): string {\n  return `usr_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// Clear all user data function\nexport function deleteUser(userId: string): void {\n  const users = getUsers();\n  const updatedUsers = users.filter(user => user.id !== userId);\n  localStorage.setItem(USERS_KEY, JSON.stringify(updatedUsers));\n}\n\nexport function clearAllUsers(): void {\n  localStorage.removeItem(USERS_KEY);\n  localStorage.removeItem(SESSION_KEY);\n}","size_bytes":2810},"client/src/auth/types.ts":{"content":"export type Role = \"client\" | \"inspector\";\n\nexport interface User {\n  id: string;            // \"usr_xxxx\"\n  email: string;\n  passwordHash: string;  // store hash, not raw password\n  role: Role;\n  name?: string;\n  phone?: string;\n  createdAt: string;\n}\n\nexport interface Session {\n  userId: string;\n  createdAt: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface SignupData {\n  email: string;\n  password: string;\n  role: Role;\n  name?: string;\n  phone?: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  loading: boolean;\n}\n\nexport interface AuthContextType extends AuthState {\n  login: (credentials: LoginCredentials) => Promise<User>;\n  signup: (data: SignupData) => Promise<void>;\n  logout: () => void;\n  updateProfile: (updates: Partial<Pick<User, 'name' | 'phone'>>) => Promise<void>;\n  deleteAccount: () => Promise<void>;\n}","size_bytes":895},"client/src/components/InterestButton.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Heart } from 'lucide-react';\nimport { useLocalStore } from '@/store/localStore';\n\ninterface InterestButtonProps {\n  requestId: string;\n  interestCount: number;\n  className?: string;\n}\n\nexport function InterestButton({ requestId, interestCount, className }: InterestButtonProps) {\n  const { inspectorProfile, toggleInterest, requests } = useLocalStore();\n  \n  const request = requests.find(r => r.id === requestId);\n  const isInterested = request?.interestedInspectorEmails?.includes(inspectorProfile.email) || false;\n  \n  // Use the actual interestCount from the store to ensure it's always current\n  const currentInterestCount = request?.interestCount || interestCount;\n\n  const handleToggle = () => {\n    toggleInterest(requestId, inspectorProfile.email);\n  };\n\n  return (\n    <div className={`flex items-center space-x-2 ${className}`}>\n      <Button\n        onClick={handleToggle}\n        variant={isInterested ? \"default\" : \"outline\"}\n        size=\"sm\"\n        className={`flex items-center space-x-1 ${\n          isInterested \n            ? 'bg-red-500 hover:bg-red-600 text-white border-red-500' \n            : 'border-red-200 text-red-600 hover:bg-red-50'\n        }`}\n        data-testid={`button-interest-${requestId}`}\n      >\n        <Heart className={`w-4 h-4 ${isInterested ? 'fill-current' : ''}`} />\n        <span>{isInterested ? 'Interested' : 'I\\'m Interested'}</span>\n      </Button>\n      {currentInterestCount > 0 && (\n        <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800 flex items-center gap-1 whitespace-nowrap\" data-testid={`badge-interest-count-${requestId}`}>\n          <span>{currentInterestCount}</span>\n          <span>❤</span>\n        </Badge>\n      )}\n    </div>\n  );\n}","size_bytes":1824},"client/src/components/ProfileEditor.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocalStore } from '@/store/localStore';\nimport { X, Plus } from 'lucide-react';\n\nexport function ProfileEditor() {\n  const { inspectorProfile, updateInspectorProfile } = useLocalStore();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    displayName: inspectorProfile.displayName,\n    basePrice: inspectorProfile.basePrice.toString(),\n    serviceAreas: inspectorProfile.serviceAreas,\n    specialties: inspectorProfile.specialties\n  });\n\n  const [newServiceArea, setNewServiceArea] = useState('');\n  const [newSpecialty, setNewSpecialty] = useState('');\n\n  useEffect(() => {\n    setFormData({\n      displayName: inspectorProfile.displayName,\n      basePrice: inspectorProfile.basePrice.toString(),\n      serviceAreas: inspectorProfile.serviceAreas,\n      specialties: inspectorProfile.specialties\n    });\n  }, [inspectorProfile]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const updates = {\n      displayName: formData.displayName,\n      basePrice: parseInt(formData.basePrice) || 0,\n      serviceAreas: formData.serviceAreas,\n      specialties: formData.specialties\n    };\n\n    updateInspectorProfile(updates);\n    \n    toast({\n      title: \"Profile Updated\",\n      description: \"Your inspector profile has been saved successfully.\",\n    });\n  };\n\n  const addServiceArea = () => {\n    if (newServiceArea.trim() && !formData.serviceAreas.includes(newServiceArea.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        serviceAreas: [...prev.serviceAreas, newServiceArea.trim()]\n      }));\n      setNewServiceArea('');\n    }\n  };\n\n  const removeServiceArea = (area: string) => {\n    setFormData(prev => ({\n      ...prev,\n      serviceAreas: prev.serviceAreas.filter(a => a !== area)\n    }));\n  };\n\n  const addSpecialty = () => {\n    if (newSpecialty.trim() && !formData.specialties.includes(newSpecialty.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        specialties: [...prev.specialties, newSpecialty.trim()]\n      }));\n      setNewSpecialty('');\n    }\n  };\n\n  const removeSpecialty = (specialty: string) => {\n    setFormData(prev => ({\n      ...prev,\n      specialties: prev.specialties.filter(s => s !== specialty)\n    }));\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-semibold text-secondary\" data-testid=\"text-profile-title\">\n          Inspector Profile\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"displayName\">Display Name</Label>\n            <Input\n              id=\"displayName\"\n              type=\"text\"\n              value={formData.displayName}\n              onChange={(e) => setFormData(prev => ({ ...prev, displayName: e.target.value }))}\n              className=\"mt-1\"\n              data-testid=\"input-display-name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"basePrice\">Base Price ($)</Label>\n            <Input\n              id=\"basePrice\"\n              type=\"number\"\n              value={formData.basePrice}\n              onChange={(e) => setFormData(prev => ({ ...prev, basePrice: e.target.value }))}\n              className=\"mt-1\"\n              min=\"0\"\n              data-testid=\"input-base-price\"\n            />\n          </div>\n\n          <div>\n            <Label>Service Areas</Label>\n            <div className=\"mt-2 space-y-2\">\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.serviceAreas.map((area, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\" data-testid={`badge-service-area-${index}`}>\n                    {area}\n                    <button\n                      type=\"button\"\n                      onClick={() => removeServiceArea(area)}\n                      className=\"ml-1 hover:text-red-500\"\n                      data-testid={`button-remove-area-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Add service area\"\n                  value={newServiceArea}\n                  onChange={(e) => setNewServiceArea(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addServiceArea())}\n                  data-testid=\"input-new-service-area\"\n                />\n                <Button type=\"button\" onClick={addServiceArea} size=\"sm\" data-testid=\"button-add-service-area\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <Label>Specialties</Label>\n            <div className=\"mt-2 space-y-2\">\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.specialties.map((specialty, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\" data-testid={`badge-specialty-${index}`}>\n                    {specialty}\n                    <button\n                      type=\"button\"\n                      onClick={() => removeSpecialty(specialty)}\n                      className=\"ml-1 hover:text-red-500\"\n                      data-testid={`button-remove-specialty-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Add specialty\"\n                  value={newSpecialty}\n                  onChange={(e) => setNewSpecialty(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addSpecialty())}\n                  data-testid=\"input-new-specialty\"\n                />\n                <Button type=\"button\" onClick={addSpecialty} size=\"sm\" data-testid=\"button-add-specialty\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-profile\">\n            Save Profile\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6825},"client/src/components/RequestCard.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { InterestButton } from '@/components/InterestButton';\nimport { Request } from '@/store/localStore';\nimport { Calendar, MapPin, Home, DollarSign, Clock } from 'lucide-react';\n\ninterface RequestCardProps {\n  request: Request;\n}\n\nfunction obfuscateEmail(email: string): string {\n  const [local, domain] = email.split('@');\n  if (local.length <= 2) return email;\n  return `${local[0]}***@${domain}`;\n}\n\nfunction isNew(createdAt: string): boolean {\n  const created = new Date(createdAt);\n  const now = new Date();\n  const hoursDiff = (now.getTime() - created.getTime()) / (1000 * 60 * 60);\n  return hoursDiff <= 48;\n}\n\nexport function RequestCard({ request }: RequestCardProps) {\n  const truncateNotes = (notes: string, maxLength: number = 100) => {\n    return notes.length > maxLength ? `${notes.substring(0, maxLength)}...` : notes;\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow\" data-testid={`card-request-${request.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <h3 className=\"text-lg font-semibold text-secondary\" data-testid={`text-request-location-${request.id}`}>\n                {request.property.cityZip}\n              </h3>\n              {isNew(request.createdAt) && (\n                <Badge className=\"bg-green-100 text-green-800 text-xs\" data-testid={`badge-new-${request.id}`}>\n                  New\n                </Badge>\n              )}\n              <Badge \n                className={`text-xs ${\n                  request.type === 'client_request' \n                    ? 'bg-blue-100 text-blue-800' \n                    : 'bg-purple-100 text-purple-800'\n                }`}\n                data-testid={`badge-request-type-${request.id}`}\n              >\n                {request.type === 'client_request' ? 'Client Request' : 'Open Request'}\n              </Badge>\n            </div>\n            <p className=\"text-sm text-muted mb-1\" data-testid={`text-request-client-${request.id}`}>\n              {request.client.name} • {obfuscateEmail(request.client.email)}\n            </p>\n          </div>\n          {request.budget && (\n            <div className=\"text-right\">\n              <div className=\"flex items-center text-sm text-accent font-medium\">\n                <DollarSign className=\"w-4 h-4 mr-1\" />\n                <span data-testid={`text-request-budget-${request.id}`}>${request.budget}</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-3 mb-4\">\n          <div className=\"flex items-center text-sm text-muted\">\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            <span data-testid={`text-request-date-${request.id}`}>\n              Preferred: {new Date(request.schedule.preferredDate).toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric', \n                year: 'numeric' \n              })}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center text-sm text-muted\">\n            <Home className=\"w-4 h-4 mr-2\" />\n            <span data-testid={`text-request-property-${request.id}`}>\n              {request.property.type} • {request.property.beds}bd/{request.property.baths}ba\n              {request.property.sqft && ` • ${request.property.sqft} sqft`}\n            </span>\n          </div>\n\n          {request.notes && (\n            <div className=\"text-sm text-muted\">\n              <span className=\"font-medium\">Notes: </span>\n              <span data-testid={`text-request-notes-${request.id}`}>\n                {truncateNotes(request.notes)}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-between items-center pt-3 border-t border-gray-100\">\n          <div className=\"flex space-x-2\">\n            <Link href={`/requests/${request.id}`}>\n              <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-details-${request.id}`}>\n                View Details\n              </Button>\n            </Link>\n          </div>\n          \n          <InterestButton \n            key={`interest-${request.id}-${request.interestCount}`}\n            requestId={request.id} \n            interestCount={request.interestCount}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4652},"client/src/components/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { MapPin, User, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/auth/AuthProvider\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\" data-testid=\"link-home\">\n                <h1 className=\"text-2xl font-bold text-primary flex items-center\">\n                  <MapPin className=\"mr-2 h-6 w-6\" />\n                  Lumina\n                </h1>\n              </Link>\n            </div>\n          </div>\n          <nav className=\"flex items-center space-x-6\">\n            {!user ? (\n              <div className=\"flex space-x-3\">\n                <Link href=\"/login\">\n                  <Button variant=\"outline\" data-testid=\"button-login\">\n                    Login\n                  </Button>\n                </Link>\n                <Link href=\"/signup\">\n                  <Button className=\"bg-primary hover:bg-blue-700\" data-testid=\"button-signup\">\n                    Create Account\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-4\">\n                {/* Role-specific navigation */}\n                <div className=\"flex space-x-3\">\n                  {user.role === \"client\" ? (\n                    <>\n                      <Link \n                        href=\"/inspectors\" \n                        className=\"bg-primary hover:bg-blue-700 text-white px-3 py-2 rounded-lg font-medium transition-colors text-sm\"\n                        data-testid=\"link-find-inspectors\"\n                      >\n                        Find Inspectors\n                      </Link>\n                      <Link \n                        href=\"/my-requests\" \n                        className=\"bg-primary hover:bg-blue-700 text-white px-3 py-2 rounded-lg font-medium transition-colors text-sm\"\n                        data-testid=\"link-my-requests\"\n                      >\n                        My Requests\n                      </Link>\n                    </>\n                  ) : (\n                    <>\n                      <Link \n                        href=\"/requests\" \n                        className=\"bg-primary hover:bg-blue-700 text-white px-3 py-2 rounded-lg font-medium transition-colors text-sm\"\n                        data-testid=\"link-view-requests\"\n                      >\n                        View Requests\n                      </Link>\n                      <Link \n                        href=\"/inspector\" \n                        className=\"bg-primary hover:bg-blue-700 text-white px-3 py-2 rounded-lg font-medium transition-colors text-sm\"\n                        data-testid=\"link-inspector-dashboard\"\n                      >\n                        Dashboard\n                      </Link>\n                    </>\n                  )}\n                </div>\n                \n                {/* User dropdown */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                      <User className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Hi, {user.name || user.email.split('@')[0]}</span>\n                      <Badge \n                        variant=\"secondary\" \n                        className={`text-xs capitalize ${\n                          user.role === 'client' \n                            ? 'bg-blue-100 text-blue-800' \n                            : 'bg-green-100 text-green-800'\n                        }`}\n                      >\n                        {user.role}\n                      </Badge>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/account\" className=\"flex items-center w-full\" data-testid=\"link-account\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Account Settings\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={logout}\n                      className=\"flex items-center text-red-600 focus:text-red-600 focus:bg-red-50\"\n                      data-testid=\"button-logout\"\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            )}\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5335},"client/src/data/mockRequests.ts":{"content":"import { Request } from '@/store/localStore';\n\nexport const mockRequests: Request[] = [\n  {\n    id: \"req_001\",\n    createdAt: \"2024-08-20T10:30:00Z\",\n    status: \"open\",\n    client: {\n      name: \"Sarah Johnson\",\n      email: \"sarah.johnson@email.com\",\n      phone: \"(415) 555-0123\"\n    },\n    property: {\n      address: \"1247 Oak Street\",\n      cityZip: \"San Francisco, CA 94117\",\n      type: \"House\",\n      beds: 3,\n      baths: 2,\n      sqft: 2100\n    },\n    schedule: {\n      preferredDate: \"2024-08-25\",\n      altDate: \"2024-08-26\"\n    },\n    budget: 450,\n    notes: \"Looking for a thorough inspection of our 1920s Victorian home before closing. Need special attention to electrical systems, plumbing, and foundation. The house has been renovated but we want to ensure everything is up to code.\",\n    interestCount: 3,\n    interestedInspectorIds: [\"inspector_demo\", \"insp_003\", \"insp_005\"]\n  },\n  {\n    id: \"req_002\", \n    createdAt: \"2024-08-22T14:15:00Z\",\n    status: \"open\",\n    client: {\n      name: \"Michael Chen\",\n      email: \"m.chen.home@email.com\",\n      phone: \"(415) 555-0147\"\n    },\n    property: {\n      address: \"890 Market Street, Unit 15B\",\n      cityZip: \"San Francisco, CA 94102\", \n      type: \"Condo\",\n      beds: 2,\n      baths: 1,\n      sqft: 950\n    },\n    schedule: {\n      preferredDate: \"2024-08-24\"\n    },\n    budget: 350,\n    notes: \"First-time buyer seeking inspection for a 2-bedroom condo in downtown area. Particularly concerned about HVAC system and any potential water damage issues.\",\n    interestCount: 2,\n    interestedInspectorIds: [\"inspector_demo\", \"insp_001\"]\n  },\n  {\n    id: \"req_003\",\n    createdAt: \"2024-08-18T09:45:00Z\",\n    status: \"open\",\n    client: {\n      name: \"Emily Rodriguez\",\n      email: \"emily.r.home@email.com\", \n      phone: \"(415) 555-0198\"\n    },\n    property: {\n      address: \"456 Valencia Street\",\n      cityZip: \"San Francisco, CA 94110\",\n      type: \"Townhome\",\n      beds: 3,\n      baths: 2,\n      sqft: 1650\n    },\n    schedule: {\n      preferredDate: \"2024-08-26\",\n      altDate: \"2024-08-27\"\n    },\n    budget: 400,\n    notes: \"Recently purchased townhome that was listed as 'move-in ready'. Want to verify all systems are functioning properly before we move in next month.\",\n    interestCount: 1,\n    interestedInspectorIds: [\"insp_003\"]\n  },\n  {\n    id: \"req_004\",\n    createdAt: \"2024-08-19T16:20:00Z\",\n    status: \"open\",\n    client: {\n      name: \"David Kim\",\n      email: \"david.kim.luxury@email.com\",\n      phone: \"(415) 555-0276\"\n    },\n    property: {\n      address: \"2350 Pacific Heights\",\n      cityZip: \"San Francisco, CA 94115\",\n      type: \"House\",\n      beds: 5,\n      baths: 4,\n      sqft: 4200\n    },\n    schedule: {\n      preferredDate: \"2024-08-28\"\n    },\n    budget: 650,\n    notes: \"Purchasing a luxury home with smart home features, wine cellar, and pool. Need inspector experienced with high-end properties and modern systems.\",\n    interestCount: 2,\n    interestedInspectorIds: [\"insp_005\", \"insp_001\"]\n  },\n  {\n    id: \"req_005\",\n    createdAt: \"2024-08-21T11:30:00Z\",\n    status: \"open\",\n    client: {\n      name: \"Jennifer Taylor\",\n      email: \"j.taylor.investor@email.com\",\n      phone: \"(415) 555-0334\"\n    },\n    property: {\n      address: \"789 Mission Street\",\n      cityZip: \"San Francisco, CA 94103\",\n      type: \"House\",\n      beds: 2,\n      baths: 1,\n      sqft: 1800\n    },\n    schedule: {\n      preferredDate: \"2024-08-23\",\n      altDate: \"2024-08-24\"\n    },\n    budget: 500,\n    notes: \"Looking at a property that needs work. Need detailed assessment of what repairs are needed and rough cost estimates. Property has been vacant for 2 years.\",\n    interestCount: 3,\n    interestedInspectorIds: [\"inspector_demo\", \"insp_003\", \"insp_001\"]\n  },\n  {\n    id: \"req_006\",\n    createdAt: \"2024-08-23T08:15:00Z\",\n    status: \"open\",\n    client: {\n      name: \"Alex Martinez\",\n      email: \"alex.martinez.first@email.com\",\n      phone: \"(415) 555-0412\"\n    },\n    property: {\n      address: \"123 Folsom Street, Unit 8A\",\n      cityZip: \"San Francisco, CA 94107\",\n      type: \"Condo\",\n      beds: 1,\n      baths: 1,\n      sqft: 650\n    },\n    schedule: {\n      preferredDate: \"2024-08-29\"\n    },\n    budget: 275,\n    notes: \"First-time homebuyer on a tight budget. Small 1-bedroom condo but want to make sure there are no major issues before purchase.\",\n    interestCount: 1,\n    interestedInspectorIds: [\"insp_001\"]\n  },\n  {\n    id: \"req_007\",\n    createdAt: \"2024-08-17T13:45:00Z\",\n    status: \"open\",\n    client: {\n      name: \"Robert Wilson\",\n      email: \"r.wilson.realty@email.com\",\n      phone: \"(415) 555-0589\"\n    },\n    property: {\n      address: \"567 Hayes Street\",\n      cityZip: \"San Francisco, CA 94102\",\n      type: \"Townhome\",\n      beds: 2,\n      baths: 2,\n      sqft: 1350\n    },\n    schedule: {\n      preferredDate: \"2024-08-25\"\n    },\n    budget: 380,\n    notes: \"Investment property purchase. Need comprehensive inspection focusing on structural integrity and major systems for rental property assessment.\",\n    interestCount: 0,\n    interestedInspectorIds: []\n  }\n];","size_bytes":5092},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Account.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Header } from '@/components/header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { User, Phone, Mail, Calendar, LogOut, Edit, Settings, Trash2 } from 'lucide-react';\n\nconst profileSchema = z.object({\n  name: z.string().optional(),\n  phone: z.string().optional()\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function Account() {\n  const { user, logout, updateProfile, deleteAccount } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: user?.name || '',\n      phone: user?.phone || ''\n    }\n  });\n\n  if (!user) {\n    return null; // Should not happen due to ProtectedRoute\n  }\n\n  const onSubmit = async (data: ProfileFormData) => {\n    setIsSubmitting(true);\n    try {\n      await updateProfile(data);\n      setIsEditing(false);\n    } catch (error) {\n      // Error is handled in AuthProvider with toast\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleCancel = () => {\n    form.reset({\n      name: user.name || '',\n      phone: user.phone || ''\n    });\n    setIsEditing(false);\n  };\n\n  const handleDeleteAccount = async () => {\n    setIsDeleting(true);\n    try {\n      await deleteAccount();\n    } catch (error) {\n      // Error is handled in AuthProvider with toast\n    } finally {\n      setIsDeleting(false);\n      setShowDeleteDialog(false);\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    return role === 'client' \n      ? 'bg-blue-100 text-blue-800 border-blue-200' \n      : 'bg-green-100 text-green-800 border-green-200';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"text-account-title\">\n            Account Settings\n          </h1>\n          <p className=\"text-muted\" data-testid=\"text-account-subtitle\">\n            Manage your profile and account preferences\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Profile Card */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"mr-2 h-5 w-5\" />\n                    Profile Information\n                  </CardTitle>\n                  {!isEditing && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setIsEditing(true)}\n                      data-testid=\"button-edit-profile\"\n                    >\n                      <Edit className=\"mr-2 h-4 w-4\" />\n                      Edit\n                    </Button>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isEditing ? (\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Your full name\" \n                                {...field} \n                                data-testid=\"input-edit-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"(555) 123-4567\" \n                                {...field} \n                                data-testid=\"input-edit-phone\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex space-x-3\">\n                        <Button \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                          data-testid=\"button-save-profile\"\n                        >\n                          {isSubmitting ? (\n                            <>\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                              Saving...\n                            </>\n                          ) : (\n                            'Save Changes'\n                          )}\n                        </Button>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={handleCancel}\n                          data-testid=\"button-cancel-edit\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                ) : (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-sm font-medium text-secondary\">Email Address</label>\n                        <div className=\"flex items-center mt-1\">\n                          <Mail className=\"mr-2 h-4 w-4 text-muted\" />\n                          <span className=\"text-muted\" data-testid=\"text-user-email\">{user.email}</span>\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-secondary\">Role</label>\n                        <div className=\"mt-1\">\n                          <Badge \n                            className={`${getRoleBadgeColor(user.role)} capitalize`}\n                            data-testid=\"badge-user-role\"\n                          >\n                            {user.role}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-sm font-medium text-secondary\">Full Name</label>\n                        <div className=\"flex items-center mt-1\">\n                          <User className=\"mr-2 h-4 w-4 text-muted\" />\n                          <span className=\"text-muted\" data-testid=\"text-user-name\">\n                            {user.name || 'Not provided'}\n                          </span>\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-secondary\">Phone Number</label>\n                        <div className=\"flex items-center mt-1\">\n                          <Phone className=\"mr-2 h-4 w-4 text-muted\" />\n                          <span className=\"text-muted\" data-testid=\"text-user-phone\">\n                            {user.phone || 'Not provided'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-secondary\">Member Since</label>\n                      <div className=\"flex items-center mt-1\">\n                        <Calendar className=\"mr-2 h-4 w-4 text-muted\" />\n                        <span className=\"text-muted\" data-testid=\"text-user-created\">\n                          {new Date(user.createdAt).toLocaleDateString('en-US', { \n                            month: 'long', \n                            day: 'numeric', \n                            year: 'numeric' \n                          })}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Actions Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {user.role === 'client' ? (\n                  <Link href=\"/post\" className=\"block\">\n                    <Button className=\"w-full justify-start\" data-testid=\"button-post-request\">\n                      <Edit className=\"mr-2 h-4 w-4\" />\n                      Post a Request\n                    </Button>\n                  </Link>\n                ) : (\n                  <>\n                    <Link href=\"/inspector\" className=\"block\">\n                      <Button className=\"w-full justify-start\" data-testid=\"button-inspector-dashboard\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Inspector Dashboard\n                      </Button>\n                    </Link>\n                    <Link href=\"/requests\" className=\"block\">\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-view-requests\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        View Requests\n                      </Button>\n                    </Link>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Account Actions */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Account</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"destructive\" \n                  className=\"w-full\"\n                  onClick={logout}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign Out\n                </Button>\n                \n                <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n                  <AlertDialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full border-red-200 text-red-600 hover:bg-red-50\"\n                      data-testid=\"button-delete-account\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Delete Account\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Delete Account</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        This action cannot be undone. This will permanently delete your account\n                        and remove all your data from our servers. Are you sure you want to continue?\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel data-testid=\"button-cancel-delete\">\n                        Cancel\n                      </AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={handleDeleteAccount}\n                        disabled={isDeleting}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                        data-testid=\"button-confirm-delete\"\n                      >\n                        {isDeleting ? (\n                          <>\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                            Deleting...\n                          </>\n                        ) : (\n                          'Delete Account'\n                        )}\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13918},"client/src/pages/Forbidden.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { Shield, Home, ArrowLeft } from 'lucide-react';\n\nexport default function Forbidden() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"bg-white shadow-xl\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Shield className=\"h-10 w-10 text-red-600\" />\n            </div>\n            \n            <h1 className=\"text-2xl font-bold text-secondary mb-4\" data-testid=\"text-forbidden-title\">\n              Access Forbidden\n            </h1>\n            \n            <p className=\"text-muted mb-6\" data-testid=\"text-forbidden-message\">\n              You don't have permission to access this page. This area is restricted to {user?.role === 'client' ? 'inspectors' : 'clients'} only.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              <Button\n                onClick={() => window.history.back()}\n                variant=\"outline\"\n                className=\"w-full sm:w-auto\"\n                data-testid=\"button-go-back\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Go Back\n              </Button>\n              \n              <Link href=\"/\">\n                <Button className=\"w-full sm:w-auto\" data-testid=\"button-home\">\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  Go Home\n                </Button>\n              </Link>\n            </div>\n\n            {user && (\n              <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                <p className=\"text-xs text-muted\" data-testid=\"text-user-info\">\n                  Signed in as: {user.email} ({user.role})\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":2204},"client/src/pages/InspectorDashboard.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Header } from '@/components/header';\nimport { ProfileEditor } from '@/components/ProfileEditor';\nimport { AvailabilityManager } from '@/components/AvailabilityManager';\nimport { RequestCard } from '@/components/RequestCard';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { useLocalStore } from '@/store/localStore';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { LayoutDashboard, Heart, Settings, Plus, Briefcase, Calendar } from 'lucide-react';\n\nexport default function InspectorDashboard() {\n  const { requests, getMyInterests, inspectorProfile } = useLocalStore();\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState('requests');\n  \n  console.log('🏠 [INSPECTOR DASHBOARD] Component rendered');\n  console.log('🏠 [INSPECTOR DASHBOARD] Total requests from store:', requests.length);\n  console.log('🏠 [INSPECTOR DASHBOARD] All requests:', requests);\n  console.log('🏠 [INSPECTOR DASHBOARD] Inspector profile:', inspectorProfile);\n  console.log('🏠 [INSPECTOR DASHBOARD] Current user:', user);\n  \n  // Filter requests for this inspector only\n  const openRequests = requests.filter(req => \n    req.status === 'open' && req.type === 'open_request'\n  );\n  \n  console.log('🏠 [INSPECTOR DASHBOARD] Open requests filtered:', openRequests.length);\n  console.log('🏠 [INSPECTOR DASHBOARD] Open requests:', openRequests);\n  \n  // IMPORTANT: Client requests should ONLY show for the targeted inspector\n  const clientRequests = requests.filter(req => {\n    // Triple-check the filtering to ensure bulletproof targeting\n    const isOpen = req.status === 'open';\n    const isClientRequest = req.type === 'client_request';\n    const isTargetedToMe = req.targetInspectorEmail && \n                          inspectorProfile.email && \n                          String(req.targetInspectorEmail) === String(inspectorProfile.email);\n    \n    console.log('🏠 [INSPECTOR DASHBOARD] Checking client request:', {\n      requestId: req.id,\n      status: req.status,\n      type: req.type,\n      targetInspectorEmail: req.targetInspectorEmail,\n      myEmail: inspectorProfile.email,\n      isOpen,\n      isClientRequest,\n      isTargetedToMe,\n      finalMatch: isOpen && isClientRequest && isTargetedToMe\n    });\n    \n    return isOpen && isClientRequest && isTargetedToMe;\n  });\n  \n  console.log('🏠 [INSPECTOR DASHBOARD] Client requests filtered:', clientRequests.length);\n  console.log('🏠 [INSPECTOR DASHBOARD] Client requests:', clientRequests);\n  \n  const myInterests = getMyInterests();\n  console.log('🏠 [INSPECTOR DASHBOARD] My interests:', myInterests.length);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-secondary mb-2 flex items-center\" data-testid=\"text-dashboard-title\">\n            <LayoutDashboard className=\"mr-3 h-8 w-8\" />\n            Inspector Dashboard\n          </h1>\n          <p className=\"text-muted\" data-testid=\"text-dashboard-subtitle\">\n            Welcome back, {inspectorProfile.displayName}! Manage your inspection requests and profile.\n          </p>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"bg-white rounded-lg shadow hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Briefcase className=\"mx-auto h-8 w-8 text-primary mb-3\" />\n              <h3 className=\"font-semibold text-secondary mb-2\">Open Requests</h3>\n              <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-open-requests-count\">\n                {openRequests.length}\n              </p>\n              <Link href=\"/requests\">\n                <Button size=\"sm\" className=\"mt-2\" data-testid=\"button-view-all-requests\">\n                  View All\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white rounded-lg shadow hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Calendar className=\"mx-auto h-8 w-8 text-blue-500 mb-3\" />\n              <h3 className=\"font-semibold text-secondary mb-2\">Client Requests</h3>\n              <p className=\"text-2xl font-bold text-blue-500\" data-testid=\"text-client-requests-count\">\n                {clientRequests.length}\n              </p>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"mt-2\"\n                onClick={() => setActiveTab('client-requests')}\n                data-testid=\"button-view-client-requests\"\n              >\n                View Details\n              </Button>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white rounded-lg shadow hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Heart className=\"mx-auto h-8 w-8 text-red-500 mb-3\" />\n              <h3 className=\"font-semibold text-secondary mb-2\">My Interests</h3>\n              <p className=\"text-2xl font-bold text-red-500\" data-testid=\"text-my-interests-count\">\n                {myInterests.length}\n              </p>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"mt-2\"\n                onClick={() => setActiveTab('interests')}\n                data-testid=\"button-view-my-interests\"\n              >\n                View Details\n              </Button>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white rounded-lg shadow hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Settings className=\"mx-auto h-8 w-8 text-muted mb-3\" />\n              <h3 className=\"font-semibold text-secondary mb-2\">Base Price</h3>\n              <p className=\"text-2xl font-bold text-accent\" data-testid=\"text-base-price\">\n                ${inspectorProfile.basePrice}\n              </p>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"mt-2\"\n                onClick={() => setActiveTab('profile')}\n                data-testid=\"button-edit-profile\"\n              >\n                Edit Profile\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Dashboard Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"requests\" data-testid=\"tab-open-requests\">\n              <Briefcase className=\"mr-2 h-4 w-4\" />\n              Open Requests\n            </TabsTrigger>\n            <TabsTrigger value=\"client-requests\" data-testid=\"tab-client-requests\">\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Client Requests\n            </TabsTrigger>\n            <TabsTrigger value=\"interests\" data-testid=\"tab-my-interests\">\n              <Heart className=\"mr-2 h-4 w-4\" />\n              My Interests\n            </TabsTrigger>\n            <TabsTrigger value=\"availability\" data-testid=\"tab-availability\">\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Availability\n            </TabsTrigger>\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Profile\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"requests\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-semibold text-secondary\">Recent Open Requests</h2>\n              <Link href=\"/my-requests\">\n                <Button data-testid=\"button-view-all-open-requests\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  View All My Request\n                </Button>\n              </Link>\n            </div>\n            \n            {openRequests.length === 0 ? (\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-12 text-center\">\n                  <Briefcase className=\"mx-auto h-12 w-12 text-muted mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-secondary mb-2\" data-testid=\"text-no-open-requests\">\n                    No open requests\n                  </h3>\n                  <p className=\"text-muted mb-4\">\n                    There are currently no inspection requests available.\n                  </p>\n                  <Link href=\"/requests\">\n                    <Button data-testid=\"button-browse-requests\">Browse Requests</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {openRequests.slice(0, 6).map((request) => (\n                  <RequestCard key={request.id} request={request} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"client-requests\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-secondary\">Client Requests for Me</h2>\n            \n            {clientRequests.length === 0 ? (\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-12 text-center\">\n                  <Calendar className=\"mx-auto h-12 w-12 text-muted mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-secondary mb-2\" data-testid=\"text-no-client-requests\">\n                    No client requests yet\n                  </h3>\n                  <p className=\"text-muted mb-4\">\n                    Clients can book your available time slots directly. Make sure your availability is up to date.\n                  </p>\n                  <Button \n                    onClick={() => setActiveTab('availability')}\n                    data-testid=\"button-manage-availability\"\n                  >\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    Manage Availability\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {clientRequests.map((request) => (\n                  <RequestCard key={request.id} request={request} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"interests\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-secondary\">Requests I'm Interested In</h2>\n            \n            {myInterests.length === 0 ? (\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-12 text-center\">\n                  <Heart className=\"mx-auto h-12 w-12 text-muted mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-secondary mb-2\" data-testid=\"text-no-interests\">\n                    No interests yet\n                  </h3>\n                  <p className=\"text-muted mb-4\">\n                    Browse open requests and mark the ones you're interested in.\n                  </p>\n                  <Link href=\"/requests\">\n                    <Button data-testid=\"button-browse-for-interests\">\n                      <Heart className=\"mr-2 h-4 w-4\" />\n                      Browse Requests\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {myInterests.map((request) => (\n                  <RequestCard key={request.id} request={request} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"availability\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-secondary\">Manage Your Availability</h2>\n            <div className=\"max-w-4xl\">\n              <AvailabilityManager />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-secondary\">Inspector Profile Settings</h2>\n            <div className=\"max-w-2xl\">\n              <ProfileEditor />\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":12796},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { LoginCredentials } from '@/auth/types';\nimport { LogIn, User, Key, MapPin } from 'lucide-react';\n\nconst loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required')\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { login } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: ''\n    }\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsSubmitting(true);\n    try {\n      const user = await login(data as LoginCredentials);\n      \n      // Handle redirect after successful login with a small delay \n      // to ensure auth state is updated\n      setTimeout(() => {\n        if (user?.role === 'client') {\n          setLocation('/inspectors');\n        } else {\n          setLocation('/requests');\n        }\n      }, 100);\n    } catch (error) {\n      // Error is handled in AuthProvider with toast\n      setIsSubmitting(false);\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <Link href=\"/\">\n            <h1 className=\"text-3xl font-bold text-primary flex items-center justify-center mb-2\">\n              <MapPin className=\"mr-2 h-8 w-8\" />\n              Lumina\n            </h1>\n          </Link>\n          <h2 className=\"text-2xl font-bold text-secondary\">Welcome back</h2>\n          <p className=\"text-muted\">Sign in to your account</p>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"bg-white shadow-xl\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <LogIn className=\"mr-2 h-5 w-5\" />\n              Sign In\n            </CardTitle>\n            <CardDescription>\n              Enter your credentials to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                          <Input \n                            type=\"email\" \n                            placeholder=\"your@email.com\" \n                            className=\"pl-10\"\n                            {...field} \n                            data-testid=\"input-email\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Key className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                          <Input \n                            type=\"password\" \n                            placeholder=\"Enter your password\"\n                            className=\"pl-10\"\n                            {...field} \n                            data-testid=\"input-password\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary hover:bg-blue-700 text-white font-semibold py-3\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-login\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Signing In...\n                    </>\n                  ) : (\n                    <>\n                      <LogIn className=\"mr-2 h-4 w-4\" />\n                      Sign In\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n\n            {/* Sign Up Link */}\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted\">\n                Don't have an account?{' '}\n                <Link href=\"/signup\" className=\"font-medium text-primary hover:text-blue-700\" data-testid=\"link-signup\">\n                  Create one here\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5919},"client/src/pages/PostRequest.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Header } from '@/components/header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocalStore } from '@/store/localStore';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { FileText, MapPin, Calendar, Home } from 'lucide-react';\n\nconst requestSchema = z.object({\n  clientName: z.string().min(1, 'Name is required'),\n  clientEmail: z.string().email('Valid email is required'),\n  clientPhone: z.string().optional(),\n  propertyAddress: z.string().min(1, 'Property address is required'),\n  cityZip: z.string().min(1, 'City and ZIP code are required'),\n  preferredDate: z.string().min(1, 'Preferred date is required'),\n  altDate: z.string().optional(),\n  propertyType: z.enum(['House', 'Townhome', 'Condo'], {\n    required_error: 'Property type is required'\n  }),\n  beds: z.number().min(0, 'Beds must be 0 or greater'),\n  baths: z.number().min(0, 'Baths must be 0 or greater'),\n  sqft: z.number().optional(),\n  notes: z.string().optional(),\n  budget: z.number().optional()\n});\n\ntype RequestFormData = z.infer<typeof requestSchema>;\n\nexport default function PostRequest() {\n  const [, setLocation] = useLocation();\n  const { addRequest } = useLocalStore();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const form = useForm<RequestFormData>({\n    resolver: zodResolver(requestSchema),\n    defaultValues: {\n      clientName: user?.name || '',\n      clientEmail: user?.email || '',\n      clientPhone: '',\n      propertyAddress: '',\n      cityZip: '',\n      preferredDate: '',\n      altDate: '',\n      beds: 0,\n      baths: 0,\n      notes: ''\n    }\n  });\n\n  // Update form when user data loads\n  useEffect(() => {\n    if (user) {\n      form.setValue('clientName', user.name || '');\n      form.setValue('clientEmail', user.email || '');\n    }\n  }, [user, form]);\n\n  const onSubmit = (data: RequestFormData) => {\n    console.log('📝 [POST REQUEST] Form submitted');\n    console.log('📝 [POST REQUEST] Form data:', data);\n    \n    try {\n      console.log('📝 [POST REQUEST] Calling addRequest with data');\n      const requestId = addRequest({\n        status: 'open',\n        type: 'open_request', // This is an open request visible to all inspectors\n        client: {\n          name: data.clientName,\n          email: data.clientEmail,\n          phone: data.clientPhone || ''\n        },\n        property: {\n          address: data.propertyAddress,\n          cityZip: data.cityZip,\n          type: data.propertyType,\n          beds: data.beds,\n          baths: data.baths,\n          sqft: data.sqft\n        },\n        schedule: {\n          preferredDate: data.preferredDate,\n          altDate: data.altDate\n        },\n        budget: data.budget,\n        notes: data.notes || ''\n      });\n\n      console.log('📝 [POST REQUEST] Request created with ID:', requestId);\n      console.log('📝 [POST REQUEST] Checking localStorage after creation...');\n      \n      // Debug localStorage state\n      const sharedRequests = localStorage.getItem('inspect_now_shared_requests');\n      console.log('📝 [POST REQUEST] SharedRequests in localStorage:', sharedRequests);\n      if (sharedRequests) {\n        const parsed = JSON.parse(sharedRequests);\n        console.log('📝 [POST REQUEST] Parsed requests count:', parsed.length);\n      }\n\n      toast({\n        title: \"Request Posted!\",\n        description: \"Your inspection request has been posted successfully.\",\n      });\n\n      setLocation('/thanks');\n    } catch (error) {\n      console.error('📝 [POST REQUEST] Error creating request:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to post request. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"text-post-request-title\">\n            Request an Inspection\n          </h1>\n          <p className=\"text-muted\" data-testid=\"text-post-request-subtitle\">\n            Fill out the form below and licensed inspectors in your area will be able to see your request.\n          </p>\n        </div>\n\n        <Card className=\"bg-white rounded-xl shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <FileText className=\"mr-2 h-5 w-5\" />\n              Inspection Request Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Contact Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-secondary\">Contact Information</h3>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"clientName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your full name\" {...field} data-testid=\"input-client-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"clientEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address * (from your account)</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"your@email.com\" {...field} data-testid=\"input-client-email\" readOnly className=\"bg-gray-50\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"clientPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number (optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"(555) 123-4567\" {...field} data-testid=\"input-client-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Property Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-secondary flex items-center\">\n                    <Home className=\"mr-2 h-5 w-5\" />\n                    Property Information\n                  </h3>\n                  <FormField\n                    control={form.control}\n                    name=\"propertyAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Property Address *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"123 Main Street\" {...field} data-testid=\"input-property-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"cityZip\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>City, ZIP Code *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Irvine, 92617\" {...field} data-testid=\"input-city-zip\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"propertyType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Property Type *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-property-type\">\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"House\">House</SelectItem>\n                              <SelectItem value=\"Townhome\">Townhome</SelectItem>\n                              <SelectItem value=\"Condo\">Condo</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"beds\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bedrooms *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              min=\"0\" \n                              {...field} \n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              data-testid=\"input-beds\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"baths\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bathrooms *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              min=\"0\" \n                              step=\"0.5\"\n                              {...field} \n                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                              data-testid=\"input-baths\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"sqft\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Square Footage (optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"0\" \n                            placeholder=\"e.g., 1650\"\n                            {...field} \n                            onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                            data-testid=\"input-sqft\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Scheduling */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-secondary flex items-center\">\n                    <Calendar className=\"mr-2 h-5 w-5\" />\n                    Preferred Dates\n                  </h3>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"preferredDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Preferred Date *</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-preferred-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"altDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Alternative Date (optional)</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-alt-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Additional Details */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-secondary\">Additional Details</h3>\n                  <FormField\n                    control={form.control}\n                    name=\"budget\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Budget (optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"0\" \n                            placeholder=\"e.g., 400\"\n                            {...field} \n                            onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                            data-testid=\"input-budget\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Special Notes or Requirements (optional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Any specific concerns, requirements, or timeline details...\"\n                            className=\"min-h-[100px]\"\n                            {...field} \n                            data-testid=\"textarea-notes\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg text-lg\"\n                  data-testid=\"button-submit-request\"\n                >\n                  Post Inspection Request\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16358},"client/src/pages/RequestDetail.tsx":{"content":"import { useRoute } from 'wouter';\nimport { Header } from '@/components/header';\nimport { InterestButton } from '@/components/InterestButton';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useLocalStore } from '@/store/localStore';\nimport { \n  Calendar, \n  MapPin, \n  Home, \n  DollarSign, \n  Clock, \n  Mail, \n  Phone, \n  User,\n  MessageSquare,\n  Lock\n} from 'lucide-react';\n\nfunction obfuscateEmail(email: string): string {\n  const [local, domain] = email.split('@');\n  if (local.length <= 2) return email;\n  return `${local[0]}***@${domain}`;\n}\n\nfunction isNew(createdAt: string): boolean {\n  const created = new Date(createdAt);\n  const now = new Date();\n  const hoursDiff = (now.getTime() - created.getTime()) / (1000 * 60 * 60);\n  return hoursDiff <= 48;\n}\n\nexport default function RequestDetail() {\n  const [match, params] = useRoute('/requests/:id');\n  const { getRequestById } = useLocalStore();\n  \n  const request = match && params?.id ? getRequestById(params.id) : null;\n\n  if (!request) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\" data-testid=\"text-request-not-found\">\n            <h1 className=\"text-2xl font-bold text-secondary mb-2\">Request Not Found</h1>\n            <p className=\"text-muted\">The requested inspection could not be found.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Request Header */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex justify-between items-start mb-6\">\n                  <div>\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h1 className=\"text-3xl font-bold text-secondary\" data-testid=\"text-request-title\">\n                        {request.property.cityZip}\n                      </h1>\n                      {isNew(request.createdAt) && (\n                        <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-new-request\">\n                          New\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-muted\" data-testid=\"text-request-posted\">\n                      Posted {new Date(request.createdAt).toLocaleDateString('en-US', { \n                        month: 'long', \n                        day: 'numeric', \n                        year: 'numeric',\n                        hour: 'numeric',\n                        minute: '2-digit'\n                      })}\n                    </p>\n                  </div>\n                  {request.budget && (\n                    <div className=\"text-right\">\n                      <div className=\"text-3xl font-bold text-accent\" data-testid=\"text-request-budget\">\n                        ${request.budget}\n                      </div>\n                      <p className=\"text-sm text-muted\">Budget</p>\n                    </div>\n                  )}\n                </div>\n\n                <InterestButton \n                  requestId={request.id} \n                  interestCount={request.interestCount}\n                  className=\"mb-6\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Property Details */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-secondary mb-6 flex items-center\">\n                  <Home className=\"mr-3 h-6 w-6\" />\n                  Property Details\n                </h2>\n                \n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start\">\n                      <MapPin className=\"w-5 h-5 mr-3 mt-1 text-muted\" />\n                      <div>\n                        <p className=\"font-medium text-secondary\">Address</p>\n                        <p className=\"text-muted\" data-testid=\"text-property-address\">\n                          {request.property.address}\n                        </p>\n                        <p className=\"text-muted\" data-testid=\"text-property-city-zip\">\n                          {request.property.cityZip}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"font-medium text-secondary mb-2\">Property Specifications</p>\n                      <div className=\"space-y-1 text-muted\">\n                        <p data-testid=\"text-property-type\">Type: {request.property.type}</p>\n                        <p data-testid=\"text-property-beds-baths\">\n                          {request.property.beds} bedrooms, {request.property.baths} bathrooms\n                        </p>\n                        {request.property.sqft && (\n                          <p data-testid=\"text-property-sqft\">{request.property.sqft} square feet</p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Schedule */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-secondary mb-6 flex items-center\">\n                  <Calendar className=\"mr-3 h-6 w-6\" />\n                  Preferred Schedule\n                </h2>\n                \n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"font-medium text-secondary mb-2\">Preferred Date</p>\n                      <p className=\"text-lg text-muted\" data-testid=\"text-preferred-date\">\n                        {new Date(request.schedule.preferredDate).toLocaleDateString('en-US', { \n                          weekday: 'long',\n                          month: 'long', \n                          day: 'numeric', \n                          year: 'numeric' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {request.schedule.altDate && (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <p className=\"font-medium text-secondary mb-2\">Alternative Date</p>\n                        <p className=\"text-lg text-muted\" data-testid=\"text-alt-date\">\n                          {new Date(request.schedule.altDate).toLocaleDateString('en-US', { \n                            weekday: 'long',\n                            month: 'long', \n                            day: 'numeric', \n                            year: 'numeric' \n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Special Notes */}\n            {request.notes && (\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-8\">\n                  <h2 className=\"text-2xl font-semibold text-secondary mb-4 flex items-center\">\n                    <MessageSquare className=\"mr-3 h-6 w-6\" />\n                    Special Notes\n                  </h2>\n                  <p className=\"text-muted whitespace-pre-wrap\" data-testid=\"text-request-notes\">\n                    {request.notes}\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-8 space-y-6\">\n              {/* Interest Stats */}\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-secondary mb-4\">Interest Level</h3>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-interest-count\">\n                      {request.interestCount}\n                    </div>\n                    <p className=\"text-muted\">\n                      Inspector{request.interestCount !== 1 ? 's' : ''} interested\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Contact Information */}\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-secondary mb-4\">Client Information</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start\">\n                      <User className=\"w-5 h-5 mr-3 mt-1 text-muted\" />\n                      <div>\n                        <p className=\"font-medium text-secondary\">Contact</p>\n                        <p className=\"text-muted\" data-testid=\"text-client-name\">{request.client.name}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start\">\n                      <Mail className=\"w-5 h-5 mr-3 mt-1 text-muted\" />\n                      <div>\n                        <p className=\"font-medium text-secondary\">Email</p>\n                        <p className=\"text-muted\" data-testid=\"text-client-email\">{obfuscateEmail(request.client.email)}</p>\n                      </div>\n                    </div>\n                    \n                    {request.client.phone && (\n                      <div className=\"flex items-start\">\n                        <Phone className=\"w-5 h-5 mr-3 mt-1 text-muted\" />\n                        <div>\n                          <p className=\"font-medium text-secondary\">Phone</p>\n                          <p className=\"text-muted\" data-testid=\"text-client-phone\">\n                            {request.client.phone.substring(0, 6)}***\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <Separator className=\"my-4\" />\n                  \n                  <Button \n                    className=\"w-full bg-gray-400 text-white cursor-not-allowed\" \n                    disabled\n                    data-testid=\"button-contact-client\"\n                  >\n                    <Lock className=\"mr-2 h-4 w-4\" />\n                    Contact Client\n                  </Button>\n                  <p className=\"text-xs text-muted text-center mt-2\">\n                    Contact details are shared after client accepts an inspector\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11546},"client/src/pages/RequestsList.tsx":{"content":"import { useState, useMemo, useEffect } from 'react';\nimport { Header } from '@/components/header';\nimport { RequestCard } from '@/components/RequestCard';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useLocalStore } from '@/store/localStore';\nimport { Search, Filter, Briefcase } from 'lucide-react';\n\nexport default function RequestsList() {\n  const { requests, inspectorProfile } = useLocalStore();\n  const [cityFilter, setCityFilter] = useState('');\n  const [propertyTypeFilter, setPropertyTypeFilter] = useState('');\n  const [earliestDateFilter, setEarliestDateFilter] = useState('');\n\n  // No mock data loading - only real requests\n\n  const filteredRequests = useMemo(() => {\n    return requests\n      .filter(req => req.status === 'open')\n      .filter(req => {\n        // Show open requests to all inspectors, but HIDE client requests from non-target inspectors\n        if (req.type === 'open_request') {\n          return true; // All inspectors can see open requests\n        } else if (req.type === 'client_request') {\n          // Client requests should ONLY be visible to the targeted inspector\n          const isTargetedToMe = req.targetInspectorEmail && \n                                inspectorProfile.email && \n                                String(req.targetInspectorEmail) === String(inspectorProfile.email);\n          return isTargetedToMe;\n        }\n        return false; // Hide any other request types\n      })\n      .filter(req => {\n        if (cityFilter) {\n          return req.property.cityZip.toLowerCase().includes(cityFilter.toLowerCase());\n        }\n        return true;\n      })\n      .filter(req => {\n        if (propertyTypeFilter && propertyTypeFilter !== 'all') {\n          return req.property.type === propertyTypeFilter;\n        }\n        return true;\n      })\n      .filter(req => {\n        if (earliestDateFilter) {\n          return new Date(req.schedule.preferredDate) >= new Date(earliestDateFilter);\n        }\n        return true;\n      })\n      .sort((a, b) => new Date(a.schedule.preferredDate).getTime() - new Date(b.schedule.preferredDate).getTime());\n  }, [requests, cityFilter, propertyTypeFilter, earliestDateFilter, inspectorProfile.email]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Directory Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-secondary mb-2 flex items-center\" data-testid=\"text-requests-title\">\n            <Briefcase className=\"mr-3 h-8 w-8\" />\n            Open Inspection Requests\n          </h1>\n          <p className=\"text-muted\" data-testid=\"text-requests-subtitle\">\n            Browse and express interest in inspection requests from clients in your area\n          </p>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"bg-white rounded-xl shadow-lg mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <Filter className=\"mr-2 h-5 w-5 text-muted\" />\n              <h3 className=\"text-lg font-semibold text-secondary\">Filter Requests</h3>\n            </div>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"cityFilter\">City/ZIP Code</Label>\n                <div className=\"relative mt-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                  <Input\n                    id=\"cityFilter\"\n                    placeholder=\"Search by city or ZIP\"\n                    value={cityFilter}\n                    onChange={(e) => setCityFilter(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-city-filter\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"propertyTypeFilter\">Property Type</Label>\n                <Select value={propertyTypeFilter} onValueChange={setPropertyTypeFilter}>\n                  <SelectTrigger className=\"mt-1\" data-testid=\"select-property-type-filter\">\n                    <SelectValue placeholder=\"All property types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All property types</SelectItem>\n                    <SelectItem value=\"House\">House</SelectItem>\n                    <SelectItem value=\"Townhome\">Townhome</SelectItem>\n                    <SelectItem value=\"Condo\">Condo</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"earliestDateFilter\">Earliest Date</Label>\n                <Input\n                  id=\"earliestDateFilter\"\n                  type=\"date\"\n                  value={earliestDateFilter}\n                  onChange={(e) => setEarliestDateFilter(e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"input-earliest-date-filter\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results Summary */}\n        <div className=\"mb-6\">\n          <p className=\"text-muted\" data-testid=\"text-results-count\">\n            {filteredRequests.length} requests found\n            {(cityFilter || propertyTypeFilter || earliestDateFilter) && ' (filtered)'}\n          </p>\n        </div>\n\n        {/* Requests Grid */}\n        {filteredRequests.length === 0 ? (\n          <Card className=\"bg-white rounded-xl shadow-lg\">\n            <CardContent className=\"p-12 text-center\">\n              <Briefcase className=\"mx-auto h-12 w-12 text-muted mb-4\" />\n              <h3 className=\"text-lg font-semibold text-secondary mb-2\" data-testid=\"text-no-requests\">\n                No requests found\n              </h3>\n              <p className=\"text-muted\">\n                {cityFilter || propertyTypeFilter || earliestDateFilter \n                  ? 'Try adjusting your filters to see more requests.'\n                  : 'No inspection requests are currently available.'\n                }\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredRequests.map((request) => (\n              <RequestCard key={request.id} request={request} />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6709},"client/src/pages/Signup.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { SignupData, Role } from '@/auth/types';\nimport { UserPlus, User, Key, Mail, Phone, MapPin, Shield } from 'lucide-react';\n\nconst signupSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  confirmPassword: z.string().min(1, 'Please confirm your password'),\n  role: z.enum(['client', 'inspector'], {\n    required_error: 'Please select a role'\n  }),\n  name: z.string().optional(),\n  phone: z.string().optional()\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const { signup } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      name: '',\n      phone: ''\n    }\n  });\n\n  const watchedPassword = form.watch('password');\n\n  const onSubmit = async (data: SignupFormData) => {\n    setIsSubmitting(true);\n    try {\n      const signupData: SignupData = {\n        email: data.email,\n        password: data.password,\n        role: data.role,\n        name: data.name || undefined,\n        phone: data.phone || undefined\n      };\n      await signup(signupData);\n    } catch (error) {\n      // Error is handled in AuthProvider with toast\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getPasswordStrength = (password: string) => {\n    if (password.length === 0) return null;\n    if (password.length < 8) return { text: 'Too short', color: 'text-red-500' };\n    if (password.length < 12) return { text: 'Good', color: 'text-yellow-500' };\n    return { text: 'Strong', color: 'text-green-500' };\n  };\n\n  const passwordStrength = getPasswordStrength(watchedPassword);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <Link href=\"/\">\n            <h1 className=\"text-3xl font-bold text-primary flex items-center justify-center mb-2\">\n              <MapPin className=\"mr-2 h-8 w-8\" />\n              Lumina\n            </h1>\n          </Link>\n          <h2 className=\"text-2xl font-bold text-secondary\">Create your account</h2>\n          <p className=\"text-muted\">Join the Lumina community</p>\n        </div>\n\n        {/* Signup Form */}\n        <Card className=\"bg-white shadow-xl\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <UserPlus className=\"mr-2 h-5 w-5\" />\n              Sign Up\n            </CardTitle>\n            <CardDescription>\n              Create an account to get started\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Email */}\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                          <Input \n                            type=\"email\" \n                            placeholder=\"your@email.com\" \n                            className=\"pl-10\"\n                            {...field} \n                            data-testid=\"input-signup-email\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Password */}\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Key className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                          <Input \n                            type=\"password\" \n                            placeholder=\"At least 8 characters\"\n                            className=\"pl-10\"\n                            {...field} \n                            data-testid=\"input-signup-password\"\n                          />\n                        </div>\n                      </FormControl>\n                      {passwordStrength && (\n                        <p className={`text-xs ${passwordStrength.color}`}>\n                          Password strength: {passwordStrength.text}\n                        </p>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Confirm Password */}\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Shield className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                          <Input \n                            type=\"password\" \n                            placeholder=\"Re-enter your password\"\n                            className=\"pl-10\"\n                            {...field} \n                            data-testid=\"input-confirm-password\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Role Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>I am a *</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"flex flex-col space-y-2\"\n                        >\n                          <div className=\"flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50\">\n                            <RadioGroupItem value=\"client\" id=\"client\" data-testid=\"radio-client\" />\n                            <label htmlFor=\"client\" className=\"flex-1 cursor-pointer\">\n                              <div className=\"font-medium\">Client</div>\n                              <div className=\"text-sm text-muted\">Looking for home inspection services</div>\n                            </label>\n                          </div>\n                          <div className=\"flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50\">\n                            <RadioGroupItem value=\"inspector\" id=\"inspector\" data-testid=\"radio-inspector\" />\n                            <label htmlFor=\"inspector\" className=\"flex-1 cursor-pointer\">\n                              <div className=\"font-medium\">Inspector</div>\n                              <div className=\"text-sm text-muted\">Providing home inspection services</div>\n                            </label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Optional Fields */}\n                <div className=\"grid grid-cols-1 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name (optional)</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                            <Input \n                              placeholder=\"Your full name\" \n                              className=\"pl-10\"\n                              {...field} \n                              data-testid=\"input-signup-name\"\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number (optional)</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted h-4 w-4\" />\n                            <Input \n                              placeholder=\"(555) 123-4567\" \n                              className=\"pl-10\"\n                              {...field} \n                              data-testid=\"input-signup-phone\"\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary hover:bg-blue-700 text-white font-semibold py-3\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-signup\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Creating Account...\n                    </>\n                  ) : (\n                    <>\n                      <UserPlus className=\"mr-2 h-4 w-4\" />\n                      Create Account\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            {/* Login Link */}\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted\">\n                Already have an account?{' '}\n                <Link href=\"/login\" className=\"font-medium text-primary hover:text-blue-700\" data-testid=\"link-login\">\n                  Sign in here\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11897},"client/src/pages/Thanks.tsx":{"content":"import { Link } from 'wouter';\nimport { Header } from '@/components/header';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, ArrowRight, Users, Clock } from 'lucide-react';\n\nexport default function Thanks() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <Card className=\"bg-white rounded-xl shadow-lg\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <CheckCircle className=\"h-10 w-10 text-green-600\" />\n            </div>\n            \n            <h1 className=\"text-3xl font-bold text-secondary mb-4\" data-testid=\"text-thanks-title\">\n              Request Posted Successfully!\n            </h1>\n            \n            <p className=\"text-lg text-muted mb-8 max-w-2xl mx-auto\" data-testid=\"text-thanks-message\">\n              Your inspection request has been posted and is now visible to licensed inspectors in your area. \n              You should start receiving responses from interested inspectors soon.\n            </p>\n\n            <div className=\"grid md:grid-cols-2 gap-6 mb-8 text-left\">\n              <div className=\"bg-blue-50 rounded-lg p-6\">\n                <div className=\"flex items-center mb-3\">\n                  <Users className=\"h-6 w-6 text-blue-600 mr-2\" />\n                  <h3 className=\"font-semibold text-secondary\">What Happens Next</h3>\n                </div>\n                <ul className=\"text-sm text-muted space-y-2\">\n                  <li>• Licensed inspectors can view your request</li>\n                  <li>• Interested inspectors will mark their interest</li>\n                  <li>• You'll be contacted directly by inspectors</li>\n                  <li>• Choose the inspector that fits your needs</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-green-50 rounded-lg p-6\">\n                <div className=\"flex items-center mb-3\">\n                  <Clock className=\"h-6 w-6 text-green-600 mr-2\" />\n                  <h3 className=\"font-semibold text-secondary\">Response Timeline</h3>\n                </div>\n                <ul className=\"text-sm text-muted space-y-2\">\n                  <li>• Inspectors typically respond within 2-4 hours</li>\n                  <li>• Most requests receive 3-5 responses</li>\n                  <li>• Peak response times: 9 AM - 6 PM</li>\n                  <li>• You can contact inspectors directly</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" className=\"w-full sm:w-auto\" data-testid=\"button-back-home\">\n                  Back to Home\n                </Button>\n              </Link>\n              \n              <Link href=\"/my-requests\">\n                <Button className=\"w-full sm:w-auto bg-primary hover:bg-blue-700\" data-testid=\"button-view-requests\">\n                  View All Requests\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"mt-8 pt-8 border-t border-gray-200\">\n              <p className=\"text-sm text-muted\" data-testid=\"text-demo-note\">\n                <strong>Demo Note:</strong> This is a demonstration of the Lumina platform. \n                In a real application, inspectors would receive notifications and contact you directly.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3799},"client/src/pages/inspector-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useAuth } from \"@/auth/AuthProvider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Star, \n  Briefcase, \n  Tag, \n  Shield, \n  CheckCircle, \n  Mail, \n  Phone, \n  Clock,\n  ExternalLink,\n  Calendar\n} from \"lucide-react\";\nimport { useLocalStore, type InspectorProfile } from \"@/store/localStore\";\n\n\nconst bookingSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Valid email is required'),\n  phone: z.string().min(1, 'Phone is required'),\n  address: z.string().min(1, 'Property address is required'),\n  cityZip: z.string().min(1, 'City and ZIP are required'),\n  propertyType: z.enum(['House', 'Townhome', 'Condo']),\n  beds: z.string().min(1, 'Number of bedrooms is required'),\n  baths: z.string().min(1, 'Number of bathrooms is required'),\n  sqft: z.string().optional(),\n  notes: z.string().optional()\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\nexport default function InspectorProfile() {\n  const [match, params] = useRoute(\"/inspectors/:id\");\n  const [inspector, setInspector] = useState<InspectorProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { getInspectorProfileByEmail, createBookingFromTimeSlot } = useLocalStore();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      name: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n      address: '',\n      cityZip: '',\n      propertyType: 'House',\n      beds: '3',\n      baths: '2',\n      sqft: '',\n      notes: ''\n    }\n  });\n\n  // Update form when user data loads\n  useEffect(() => {\n    if (user) {\n      form.setValue('name', user.name || '');\n      form.setValue('email', user.email || '');\n      form.setValue('phone', user.phone || '');\n    }\n  }, [user, form]);\n\n  useEffect(() => {\n    if (!match || !params?.id) return;\n\n    // Find real inspector profile by email\n    const foundInspector = getInspectorProfileByEmail(decodeURIComponent(params.id || ''));\n    \n    setInspector(foundInspector || null);\n    setLoading(false);\n  }, [match, params?.id, getInspectorProfileByEmail]);\n\n  const handleTimeSlotSelect = (timeSlotId: string) => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to book an inspection\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (user.role !== 'client') {\n      toast({\n        title: \"Client Account Required\",\n        description: \"Only client accounts can book inspections\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSelectedTimeSlot(timeSlotId);\n    setDialogOpen(true);\n  };\n\n  const onSubmitBooking = async (data: BookingFormData) => {\n    if (!selectedTimeSlot || !params?.id) return;\n\n    try {\n      const requestId = createBookingFromTimeSlot(selectedTimeSlot, decodeURIComponent(params.id || ''), {\n        name: data.name,\n        email: data.email,\n        phone: data.phone,\n        address: data.address,\n        cityZip: data.cityZip,\n        propertyType: data.propertyType,\n        beds: parseInt(data.beds),\n        baths: parseInt(data.baths),\n        sqft: data.sqft ? parseInt(data.sqft) : undefined,\n        notes: data.notes\n      });\n\n      toast({\n        title: \"Booking Requested!\",\n        description: \"Your inspection request has been sent to the inspector.\",\n      });\n\n      setDialogOpen(false);\n      setSelectedTimeSlot(null);\n      form.reset();\n      \n      // Refresh inspector data to show updated availability\n      const updatedInspector = getInspectorProfileByEmail(decodeURIComponent(params.id || ''));\n      setInspector(updatedInspector || null);\n    } catch (error) {\n      toast({\n        title: \"Booking Failed\",\n        description: error instanceof Error ? error.message : \"Failed to create booking\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    const stars = [];\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-4 w-4 fill-yellow-400/50 text-yellow-400\" />);\n    }\n\n    const remainingStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < remainingStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-4 w-4 text-gray-300\" />);\n    }\n\n    return stars;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\" data-testid=\"text-loading\">Loading inspector profile...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!inspector) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\" data-testid=\"text-not-found\">Inspector not found</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Profile Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Profile Header */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex flex-col md:flex-row items-start md:items-center space-y-4 md:space-y-0 md:space-x-6\">\n                  <img \n                    src={inspector.image || 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=400&h=400&fit=crop&crop=face'} \n                    alt={`${inspector.displayName} Profile Photo`} \n                    className=\"w-24 h-24 rounded-full object-cover\"\n                    data-testid=\"img-inspector-profile\"\n                  />\n                  <div className=\"flex-1\">\n                    <h1 className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"text-inspector-name\">\n                      {inspector.displayName}\n                    </h1>\n                    <p className=\"text-muted mb-2\" data-testid=\"text-inspector-location\">\n                      {inspector.location || 'San Francisco, CA'}\n                    </p>\n                    <div className=\"flex items-center mb-3\">\n                      <div className=\"flex mr-2\">\n                        {renderStars(inspector.rating || 5.0)}\n                      </div>\n                      <span className=\"text-secondary font-medium\" data-testid=\"text-inspector-rating\">\n                        {inspector.rating || 5.0}\n                      </span>\n                      <span className=\"text-muted ml-1\" data-testid=\"text-inspector-reviews\">\n                        ({inspector.reviewCount || 0} reviews)\n                      </span>\n                    </div>\n                    <div className=\"flex flex-wrap gap-4 text-sm\">\n                      <div className=\"flex items-center text-muted\">\n                        <Briefcase className=\"mr-1 h-4 w-4\" />\n                        <span data-testid=\"text-inspector-experience\">{inspector.yearsExperience || 1} years</span>\n                      </div>\n                      <div className=\"flex items-center text-muted\">\n                        <Tag className=\"mr-1 h-4 w-4\" />\n                        <span data-testid=\"text-inspector-certification\">{inspector.certifications?.[0] || 'State Licensed'}</span>\n                      </div>\n                      <div className=\"flex items-center text-accent\">\n                        <Shield className=\"mr-1 h-4 w-4\" />\n                        <span>Insured & Bonded</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Bio and Specialties */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-secondary mb-4\" data-testid=\"text-about-title\">About</h2>\n                <p className=\"text-muted mb-6\" data-testid=\"text-inspector-bio\">\n                  {inspector.bio || 'Professional home inspector with expertise in residential property assessments.'}\n                </p>\n                \n                <h3 className=\"text-lg font-semibold text-secondary mb-3\" data-testid=\"text-service-areas-title\">Service Areas</h3>\n                <div className=\"flex flex-wrap gap-2 mb-6\">\n                  {inspector.serviceAreas.map((area, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"bg-gray-100 text-secondary\" data-testid={`badge-service-area-${index}`}>\n                      {area}\n                    </Badge>\n                  ))}\n                </div>\n                \n                <h3 className=\"text-lg font-semibold text-secondary mb-3\" data-testid=\"text-specialties-title\">Specialties</h3>\n                <div className=\"grid md:grid-cols-2 gap-3\">\n                  {inspector.specialties.map((specialty, index) => (\n                    <div key={index} className=\"flex items-center text-muted\" data-testid={`specialty-${index}`}>\n                      <CheckCircle className=\"text-accent mr-2 h-4 w-4\" />\n                      {specialty}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Availability Info */}\n            <Card className=\"bg-white rounded-xl shadow-lg\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-secondary mb-6\" data-testid=\"text-availability-title\">Availability</h2>\n                <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n                  <div className=\"text-center p-6 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-700 mb-2\">{inspector.availability?.nextAvailable || 'This week'}</div>\n                    <div className=\"text-green-600\">Next Available</div>\n                  </div>\n                  <div className=\"text-center p-6 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-700 mb-2\">{inspector.availability?.responseTime || 'Within 4 hours'}</div>\n                    <div className=\"text-blue-600\">Response Time</div>\n                  </div>\n                </div>\n\n                {/* Time Slots */}\n                {inspector.availability?.timeSlots && inspector.availability.timeSlots.length > 0 ? (\n                  <div className=\"mt-6\">\n                    <h3 className=\"text-lg font-medium text-secondary mb-4\">Available Time Slots</h3>\n                    <div className=\"grid gap-3\">\n                      {inspector.availability.timeSlots\n                        .filter(slot => slot.available)\n                        .slice(0, 6)\n                        .map((timeSlot) => (\n                        <div\n                          key={timeSlot.id}\n                          className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:border-primary hover:bg-blue-50 transition-colors\"\n                        >\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"h-4 w-4 text-muted mr-3\" />\n                            <div>\n                              <div className=\"font-medium text-secondary\">{timeSlot.date}</div>\n                              <div className=\"text-sm text-muted\">{timeSlot.startTime} - {timeSlot.endTime}</div>\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleTimeSlotSelect(timeSlot.id)}\n                            className=\"bg-primary hover:bg-blue-700 text-white\"\n                            data-testid={`button-book-${timeSlot.id}`}\n                          >\n                            Request this time\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                    <p className=\"text-sm text-muted text-center\">\n                      <Clock className=\"inline mr-1 h-4 w-4\" />\n                      Schedule an inspection by contacting {inspector.displayName} directly\n                    </p>\n                  </div>\n                )}\n\n                {/* Booking Dialog */}\n                <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Request Inspection</DialogTitle>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmitBooking)} className=\"space-y-6\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Full Name</FormLabel>\n                                <FormControl>\n                                  <Input {...field} data-testid=\"input-booking-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"email\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Email (from your account)</FormLabel>\n                                <FormControl>\n                                  <Input type=\"email\" {...field} data-testid=\"input-booking-email\" readOnly className=\"bg-gray-50\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone Number</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-booking-phone\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Property Address</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-booking-address\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"cityZip\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City & ZIP Code</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"e.g., San Francisco, CA 94102\" data-testid=\"input-booking-cityzip\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"propertyType\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Property Type</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-booking-property-type\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"House\">House</SelectItem>\n                                    <SelectItem value=\"Townhome\">Townhome</SelectItem>\n                                    <SelectItem value=\"Condo\">Condo</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"beds\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Bedrooms</FormLabel>\n                                <FormControl>\n                                  <Input {...field} data-testid=\"input-booking-beds\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"baths\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Bathrooms</FormLabel>\n                                <FormControl>\n                                  <Input {...field} data-testid=\"input-booking-baths\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"sqft\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Square Feet (optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-booking-sqft\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Additional Notes (optional)</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} rows={3} data-testid=\"textarea-booking-notes\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-end space-x-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setDialogOpen(false)}\n                            data-testid=\"button-booking-cancel\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            className=\"bg-primary hover:bg-blue-700\"\n                            data-testid=\"button-booking-submit\"\n                          >\n                            Request Inspection\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Booking Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-8 space-y-6\">\n              {/* Pricing Card */}\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"text-base-price\">\n                      ${inspector.basePrice}\n                    </div>\n                    <p className=\"text-muted\">Starting price for standard home inspection</p>\n                  </div>\n                  \n                  <div className=\"space-y-3 mb-6 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted\">Standard Home (up to 2,500 sq ft)</span>\n                      <span className=\"text-secondary font-medium\" data-testid=\"text-standard-price\">${inspector.basePrice}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted\">Large Home (2,500+ sq ft)</span>\n                      <span className=\"text-secondary font-medium\" data-testid=\"text-large-price\">${inspector.basePrice + 125}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted\">Condo/Townhouse</span>\n                      <span className=\"text-secondary font-medium\" data-testid=\"text-condo-price\">${inspector.basePrice - 75}</span>\n                    </div>\n                    <Separator className=\"my-3\" />\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted\">Additional services available</span>\n                      <span className=\"text-accent text-xs\">View details</span>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full bg-primary hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition-colors mb-3\"\n                    data-testid=\"button-request-booking\"\n                  >\n                    <ExternalLink className=\"mr-2 h-4 w-4\" />\n                    Contact Inspector\n                  </Button>\n                  <p className=\"text-xs text-muted text-center\">\n                    Contact directly via email or phone to schedule your inspection.\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Contact Card */}\n              <Card className=\"bg-white rounded-xl shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-secondary mb-4\" data-testid=\"text-contact-title\">Contact Information</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-primary text-white rounded-full flex items-center justify-center mr-3\">\n                        <Mail className=\"h-5 w-5\" />\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted\">Email</div>\n                        <div className=\"text-secondary font-medium\" data-testid=\"text-inspector-email\">\n                          {inspector.contact?.email || inspector.email}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-accent text-white rounded-full flex items-center justify-center mr-3\">\n                        <Phone className=\"h-5 w-5\" />\n                      </div>\n                      <div>\n                        <div className=\"text-sm text-muted\">Phone</div>\n                        <div className=\"text-secondary font-medium\" data-testid=\"text-inspector-phone\">\n                          {inspector.contact?.phone || inspector.phone || '(555) 123-4567'}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Separator className=\"my-4\" />\n                    <div className=\"text-xs text-muted\">\n                      <p className=\"mb-2\">\n                        <Clock className=\"inline mr-1 h-3 w-3\" />\n                        Response time: {inspector.availability?.responseTime || 'Within 4 hours'}\n                      </p>\n                      <p>\n                        <Shield className=\"inline mr-1 h-3 w-3\" />\n                        {inspector.insurance || '$1M Professional Liability'}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27270},"client/src/pages/inspectors.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Briefcase, MapPin, DollarSign, Calendar, FileText } from \"lucide-react\";\nimport { useLocalStore, type InspectorProfile } from \"@/store/localStore\";\nimport { useAuth } from \"@/auth/AuthProvider\";\n\n\nexport default function Inspectors() {\n  const [inspectors, setInspectors] = useState<InspectorProfile[]>([]);\n  const { getAllInspectorProfiles } = useLocalStore();\n  const { user } = useAuth();\n\n  const loadInspectors = () => {\n    // Load only real inspector profiles from signup\n    const realProfiles = getAllInspectorProfiles();\n    setInspectors(realProfiles);\n  };\n\n  useEffect(() => {\n    loadInspectors();\n  }, [user?.email]); // Re-load when user changes\n\n  // Refresh inspectors when storage changes (to catch new signups)\n  useEffect(() => {\n    const handleStorageChange = () => {\n      loadInspectors();\n    };\n    \n    // Listen for storage events (triggered when new inspectors are added)\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also refresh when window regains focus\n    window.addEventListener('focus', handleStorageChange);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('focus', handleStorageChange);\n    };\n  }, []);\n\n  const renderStars = (rating: number) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    const stars = [];\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-4 w-4 fill-yellow-400/50 text-yellow-400\" />);\n    }\n\n    const remainingStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < remainingStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-4 w-4 text-gray-300\" />);\n    }\n\n    return stars;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Directory Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"text-inspectors-title\">\n                Licensed Home Inspectors\n              </h1>\n              <p className=\"text-muted\" data-testid=\"text-inspectors-count\">\n                {inspectors.length} licensed inspectors available\n              </p>\n            </div>\n            \n            {/* Post Request CTA for clients */}\n            {user && user.role === 'client' && (\n              <Link href=\"/post\">\n                <Button className=\"bg-accent hover:bg-green-600 text-white whitespace-nowrap\" data-testid=\"button-post-request\">\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  Post Request Instead\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {/* Inspectors Grid */}\n        {inspectors.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-xl font-semibold text-secondary mb-4\">No Inspectors Found</h2>\n            <p className=\"text-muted mb-6\">\n              There are currently no registered inspectors in your area. Be the first inspector to join!\n            </p>\n            <Link href=\"/signup\">\n              <Button className=\"bg-primary hover:bg-blue-700 text-white\">\n                Sign Up as Inspector\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {inspectors.map((inspector) => (\n            <Card key={inspector.email} className=\"bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow\" data-testid={`card-inspector-${inspector.email}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4 mb-4\">\n                  <img \n                    src={inspector.image || 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=400&h=400&fit=crop&crop=face'} \n                    alt={`${inspector.displayName} Profile Photo`} \n                    className=\"w-16 h-16 rounded-full object-cover\"\n                    data-testid={`img-inspector-${inspector.email}`}\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-secondary\" data-testid={`text-inspector-name-${inspector.email}`}>\n                      {inspector.displayName}\n                    </h3>\n                    <p className=\"text-sm text-muted\" data-testid={`text-inspector-location-${inspector.email}`}>\n                      {inspector.location || 'San Francisco, CA'}\n                    </p>\n                    <div className=\"flex items-center mt-1\">\n                      <div className=\"flex\">\n                        {renderStars(inspector.rating || 5.0)}\n                      </div>\n                      <span className=\"ml-2 text-sm text-muted\" data-testid={`text-inspector-rating-${inspector.email}`}>\n                        {inspector.rating || 5.0} ({inspector.reviewCount || 0} reviews)\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex items-center text-sm text-muted\">\n                    <Briefcase className=\"w-4 h-4 mr-2\" />\n                    <span data-testid={`text-inspector-experience-${inspector.email}`}>\n                      {inspector.yearsExperience || 1} years experience\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-sm text-muted\">\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    <span className=\"truncate\" data-testid={`text-inspector-areas-${inspector.email}`}>\n                      {inspector.serviceAreas.join(\", \")}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-sm text-muted\">\n                    <DollarSign className=\"w-4 h-4 mr-2\" />\n                    <span>Starting at </span>\n                    <span className=\"font-semibold text-secondary ml-1\" data-testid={`text-inspector-price-${inspector.email}`}>\n                      ${inspector.basePrice}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center text-sm text-accent\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    <span data-testid={`text-inspector-availability-${inspector.email}`}>\n                      {inspector.availability?.nextAvailable || 'This week'}\n                    </span>\n                  </div>\n                </div>\n                \n                <Link href={`/inspectors/${encodeURIComponent(inspector.email)}`}>\n                  <Button \n                    className=\"w-full bg-primary hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors\"\n                    data-testid={`button-view-profile-${inspector.email}`}\n                  >\n                    View Profile\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7730},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useLocalStore } from \"@/store/localStore\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, MapPin, Tag, Clock, FileText } from \"lucide-react\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n  const [searchLocation, setSearchLocation] = useState(\"\");\n  const { clearAllData } = useLocalStore();\n\n  // Only clear data on first app initialization (one-time setup)\n  useEffect(() => {\n    const hasInitialized = localStorage.getItem('app_initialized');\n    if (!hasInitialized) {\n      // First time setup - clear any old data\n      const keysToRemove = [\n        'inspect_now_data',\n        'inspect_now_auth', \n        'inspect_now_user',\n        'inspect_now_users',\n        'inspect_now_session',\n        'inspect_now_inspector_profile',\n        'inspect_now_all_inspector_profiles',\n        'inspect_now_requests'\n      ];\n      \n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n      });\n      \n      clearAllData();\n      localStorage.setItem('app_initialized', 'true');\n    }\n  }, []);\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setLocation(\"/inspectors\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary to-blue-700 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              Find a home inspector in minutes\n            </h1>\n            <p className=\"text-xl md:text-2xl text-blue-100 mb-12 max-w-3xl mx-auto\" data-testid=\"text-hero-subtitle\">\n              Connect with licensed, experienced home inspectors in your area. Get detailed reports and peace of mind for your property purchase.\n            </p>\n            \n            {/* Search Form */}\n            <div className=\"max-w-2xl mx-auto\">\n              <div className=\"bg-white rounded-xl shadow-xl p-8\">\n                <form onSubmit={handleSearchSubmit} className=\"flex flex-col sm:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <label htmlFor=\"location\" className=\"sr-only\">Enter city or ZIP code</label>\n                    <div className=\"relative\">\n                      <MapPin className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted h-5 w-5\" />\n                      <Input \n                        type=\"text\" \n                        id=\"location\" \n                        name=\"location\"\n                        placeholder=\"Enter city or ZIP code\" \n                        className=\"w-full pl-12 pr-4 py-4 text-secondary border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent text-lg\"\n                        value={searchLocation}\n                        onChange={(e) => setSearchLocation(e.target.value)}\n                        data-testid=\"input-search-location\"\n                      />\n                    </div>\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-accent hover:bg-green-600 text-white font-semibold py-4 px-8 rounded-lg transition-colors text-lg min-w-[160px]\"\n                    data-testid=\"button-search\"\n                  >\n                    <Search className=\"mr-2 h-5 w-5\" />\n                    Search\n                  </Button>\n                </form>\n                \n                {/* Alternative Action */}\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <p className=\"text-secondary text-center mb-4\">Or let inspectors come to you:</p>\n                  <Button \n                    onClick={() => setLocation('/post')}\n                    variant=\"outline\"\n                    className=\"w-full py-3 text-lg border-2 border-primary text-primary hover:bg-primary hover:text-white\"\n                    data-testid=\"button-post-request-cta\"\n                  >\n                    <FileText className=\"mr-2 h-5 w-5\" />\n                    Post Your Inspection Request\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-secondary mb-4\" data-testid=\"text-features-title\">\n              Why Choose Lumina?\n            </h2>\n            <p className=\"text-xl text-muted max-w-2xl mx-auto\" data-testid=\"text-features-subtitle\">\n              Professional home inspection services you can trust\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center p-6\" data-testid=\"feature-licensed\">\n              <div className=\"w-16 h-16 bg-primary text-white rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Tag className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-secondary mb-3\">Licensed Professionals</h3>\n              <p className=\"text-muted\">All inspectors are licensed and certified with years of experience</p>\n            </div>\n            \n            <div className=\"text-center p-6\" data-testid=\"feature-scheduling\">\n              <div className=\"w-16 h-16 bg-accent text-white rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-secondary mb-3\">Fast Scheduling</h3>\n              <p className=\"text-muted\">Book inspections quickly with real-time availability</p>\n            </div>\n            \n            <div className=\"text-center p-6\" data-testid=\"feature-reports\">\n              <div className=\"w-16 h-16 bg-blue-600 text-white rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-secondary mb-3\">Detailed Reports</h3>\n              <p className=\"text-muted\">Comprehensive inspection reports with photos and recommendations</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":6695},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/localStore.ts":{"content":"import { useState, useEffect } from 'react';\nimport { getSession, findUserById } from '@/auth/storage';\n\nexport interface Request {\n  id: string;\n  createdAt: string;\n  status: 'open' | 'matched' | 'closed';\n  type: 'client_request' | 'open_request';\n  targetInspectorEmail?: string; // Only for client_request type\n  client: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n  property: {\n    address: string;\n    cityZip: string;\n    type: 'House' | 'Townhome' | 'Condo';\n    beds: number;\n    baths: number;\n    sqft?: number;\n  };\n  schedule: {\n    preferredDate: string;\n    altDate?: string;\n  };\n  budget?: number;\n  notes: string;\n  interestCount: number;\n  interestedInspectorEmails: string[];\n}\n\nexport interface InspectorProfile {\n  email: string; // Primary identifier\n  displayName: string;\n  serviceAreas: string[];\n  specialties: string[];\n  basePrice: number;\n  phone?: string;\n  location?: string;\n  bio?: string;\n  yearsExperience?: number;\n  certifications?: string[];\n  rating?: number;\n  reviewCount?: number;\n  completedInspections?: number;\n  image?: string;\n  verified?: boolean;\n  availability?: {\n    nextAvailable: string;\n    responseTime: string;\n    timeSlots?: Array<{\n      id: string;\n      date: string;\n      startTime: string;\n      endTime: string;\n      available: boolean;\n    }>;\n  };\n  contact?: {\n    phone: string;\n    email: string;\n    website?: string;\n  };\n  insurance?: string;\n}\n\ninterface LocalStore {\n  requests: Request[];\n  inspectorProfile: InspectorProfile;\n  allInspectorProfiles: InspectorProfile[];\n}\n\nconst DEFAULT_INSPECTOR_PROFILE: InspectorProfile = {\n  email: 'inspector_demo@example.com',\n  displayName: 'Demo Inspector',\n  serviceAreas: ['San Francisco', 'Oakland', 'San Jose', 'Palo Alto'],\n  specialties: ['Foundation', 'Electrical', 'Plumbing', 'HVAC'],\n  basePrice: 400\n};\n\nconst STORAGE_KEY = 'inspect_now_store';\nconst SHARED_REQUESTS_KEY = 'inspect_now_shared_requests'; // Shared across all users\nconst SHARED_PROFILES_KEY = 'inspect_now_shared_profiles'; // Shared across all users\n\n// Helper function to get user-specific storage key for profiles only\nfunction getUserStorageKey(userEmail?: string): string {\n  if (!userEmail) return STORAGE_KEY;\n  return `${STORAGE_KEY}_${userEmail}`;\n}\n\nexport function useLocalStore() {\n  // Get current user email from session\n  const getCurrentUserEmail = () => {\n    try {\n      const session = getSession();\n      if (session) {\n        const user = findUserById(session.userId);\n        return user?.email;\n      }\n    } catch (error) {\n      console.error('Error getting current user:', error);\n    }\n    return undefined;\n  };\n\n  const [store, setStore] = useState<LocalStore>(() => {\n    const userEmail = getCurrentUserEmail();\n    const userStorageKey = getUserStorageKey(userEmail);\n    \n    \n    // Load shared requests (accessible to all users)\n    let sharedRequests = [];\n    try {\n      const savedRequests = localStorage.getItem(SHARED_REQUESTS_KEY);\n      \n      if (savedRequests) {\n        const parsed = JSON.parse(savedRequests);\n        \n        // Only clear if we actually find the old problematic fields\n        const hasOldFormat = Array.isArray(parsed) && parsed.some((r: any) => \n          r.hasOwnProperty('interestedInspectorIds') || r.hasOwnProperty('targetInspectorId')\n        );\n        \n        if (hasOldFormat) {\n          localStorage.removeItem(SHARED_REQUESTS_KEY);\n          sharedRequests = [];\n        } else {\n          sharedRequests = Array.isArray(parsed) ? parsed : [];\n        }\n      }\n    } catch (error) {\n      console.error('Error loading shared requests:', error);\n    }\n    \n    // Load user-specific data (profiles)\n    let userProfiles = { inspectorProfile: DEFAULT_INSPECTOR_PROFILE, allInspectorProfiles: [] };\n    try {\n      const savedUserData = localStorage.getItem(userStorageKey);\n      \n      if (savedUserData) {\n        const parsed = JSON.parse(savedUserData);\n        \n        if (parsed.inspectorProfile && parsed.allInspectorProfiles) {\n          userProfiles = {\n            inspectorProfile: parsed.inspectorProfile,\n            allInspectorProfiles: parsed.allInspectorProfiles\n          };\n        }\n      }\n    } catch (error) {\n      console.error('🏪 [STORE INIT] Error loading user data:', error);\n    }\n    \n    return {\n      requests: sharedRequests,\n      inspectorProfile: userProfiles.inspectorProfile,\n      allInspectorProfiles: userProfiles.allInspectorProfiles\n    };\n  });\n\n  // Debug function to inspect localStorage\n  const debugLocalStorage = () => {\n    console.log('🔍 [DEBUG STORAGE] === LocalStorage Debug ===');\n    console.log('🔍 [DEBUG STORAGE] All localStorage keys:', Object.keys(localStorage));\n    console.log('🔍 [DEBUG STORAGE] SHARED_REQUESTS_KEY:', SHARED_REQUESTS_KEY);\n    \n    const sharedRequests = localStorage.getItem(SHARED_REQUESTS_KEY);\n    console.log('🔍 [DEBUG STORAGE] Shared requests raw:', sharedRequests);\n    if (sharedRequests) {\n      try {\n        const parsed = JSON.parse(sharedRequests);\n        console.log('🔍 [DEBUG STORAGE] Shared requests parsed:', parsed);\n        console.log('🔍 [DEBUG STORAGE] Shared requests count:', parsed.length);\n      } catch (e) {\n        console.log('🔍 [DEBUG STORAGE] Error parsing shared requests:', e);\n      }\n    }\n    \n    const userEmail = getCurrentUserEmail();\n    const userStorageKey = getUserStorageKey(userEmail);\n    console.log('🔍 [DEBUG STORAGE] User storage key:', userStorageKey);\n    \n    const userData = localStorage.getItem(userStorageKey);\n    console.log('🔍 [DEBUG STORAGE] User data raw:', userData);\n    \n    console.log('🔍 [DEBUG STORAGE] Current store state:', store);\n    console.log('🔍 [DEBUG STORAGE] === End Debug ===');\n  };\n\n  // Clear all data function\n  const clearAllData = () => {\n    const userEmail = getCurrentUserEmail();\n    const userStorageKey = getUserStorageKey(userEmail);\n    // Clear shared requests and user-specific data\n    localStorage.removeItem(SHARED_REQUESTS_KEY);\n    localStorage.removeItem(userStorageKey);\n    // Clear user accounts and sessions \n    localStorage.removeItem('inspect_now_users');\n    localStorage.removeItem('inspect_now_session');\n    \n    setStore({\n      requests: [],\n      inspectorProfile: DEFAULT_INSPECTOR_PROFILE,\n      allInspectorProfiles: []\n    });\n  };\n\n  // Save to localStorage whenever store changes\n  useEffect(() => {\n    const userEmail = getCurrentUserEmail();\n    const userStorageKey = getUserStorageKey(userEmail);\n    \n    try {\n      // Save shared requests (accessible to all users)\n      const requestsJson = JSON.stringify(store.requests);\n      localStorage.setItem(SHARED_REQUESTS_KEY, requestsJson);\n      \n      // Save user-specific data (profiles only)\n      const userData = {\n        inspectorProfile: store.inspectorProfile,\n        allInspectorProfiles: store.allInspectorProfiles\n      };\n      const userDataJson = JSON.stringify(userData);\n      localStorage.setItem(userStorageKey, userDataJson);\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n    }\n  }, [store]);\n\n  const addRequest = (requestData: Omit<Request, 'id' | 'createdAt' | 'interestCount' | 'interestedInspectorEmails'>) => {\n    const newRequest: Request = {\n      ...requestData,\n      id: `req_${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      interestCount: 0,\n      interestedInspectorEmails: []\n    };\n    \n    try {\n      const currentRequests = localStorage.getItem(SHARED_REQUESTS_KEY);\n      const existingRequests = currentRequests ? JSON.parse(currentRequests) : [];\n      const updatedRequests = [newRequest, ...existingRequests];\n      \n      localStorage.setItem(SHARED_REQUESTS_KEY, JSON.stringify(updatedRequests));\n      \n      // Update state\n      setStore(prev => ({\n        ...prev,\n        requests: updatedRequests\n      }));\n    } catch (error) {\n      console.error('Error adding request:', error);\n      // Fallback to regular state update if localStorage fails\n      setStore(prev => ({\n        ...prev,\n        requests: [newRequest, ...prev.requests]\n      }));\n    }\n    \n    return newRequest.id;\n  };\n\n  const toggleInterest = (requestId: string, inspectorEmail: string) => {\n    console.log('toggleInterest called for:', { requestId, inspectorEmail });\n    \n    // Direct localStorage manipulation to ensure persistence\n    try {\n      const currentData = localStorage.getItem(SHARED_REQUESTS_KEY);\n      const parsed = currentData ? JSON.parse(currentData) : [];\n      \n      const updatedRequests = parsed.map((req: Request) => {\n        if (req.id === requestId) {\n          const isInterested = req.interestedInspectorEmails.includes(inspectorEmail);\n          const interestedInspectorEmails = isInterested\n            ? req.interestedInspectorEmails.filter((email: string) => email !== inspectorEmail)\n            : [...req.interestedInspectorEmails, inspectorEmail];\n          \n          const updatedRequest = {\n            ...req,\n            interestedInspectorEmails,\n            interestCount: interestedInspectorEmails.length\n          };\n          \n          console.log('toggleInterest - Updated request:', {\n            id: requestId,\n            wasInterested: isInterested,\n            nowInterested: !isInterested,\n            newCount: interestedInspectorEmails.length,\n            interestedInspectorEmails\n          });\n          \n          return updatedRequest;\n        }\n        return req;\n      });\n      \n      localStorage.setItem(SHARED_REQUESTS_KEY, JSON.stringify(updatedRequests));\n      console.log('toggleInterest - Direct localStorage save successful');\n      \n      // Force React to re-read from localStorage\n      setStore(prev => ({\n        ...prev,\n        requests: updatedRequests\n      }));\n      console.log('toggleInterest - Forced store update');\n      \n    } catch (error) {\n      console.error('toggleInterest - localStorage backup failed:', error);\n    }\n  };\n\n\n  const updateInspectorProfile = (updates: Partial<InspectorProfile>) => {\n    setStore(prev => {\n      const updatedProfile = { ...prev.inspectorProfile, ...updates };\n      // Also update in the all profiles list\n      const updatedAllProfiles = prev.allInspectorProfiles.map(profile => \n        profile.email === updatedProfile.email ? updatedProfile : profile\n      );\n      \n      return {\n        ...prev,\n        inspectorProfile: updatedProfile,\n        allInspectorProfiles: updatedAllProfiles\n      };\n    });\n  };\n\n  // Set the current inspector profile by email (for login)\n  const setCurrentInspectorProfile = (userEmail: string) => {\n    const profile = getInspectorProfileByEmail(userEmail);\n    if (profile) {\n      setStore(prev => ({\n        ...prev,\n        inspectorProfile: profile\n      }));\n    }\n  };\n\n  const addInspectorProfile = (profile: InspectorProfile) => {\n    setStore(prev => ({\n      ...prev,\n      allInspectorProfiles: [...prev.allInspectorProfiles.filter(p => p.email !== profile.email), profile]\n    }));\n    \n    // Trigger a storage event to notify other components\n    setTimeout(() => {\n      window.dispatchEvent(new Event('storage'));\n    }, 100);\n  };\n\n  const getAllInspectorProfiles = () => {\n    return store.allInspectorProfiles;\n  };\n\n  const getInspectorProfileByEmail = (email: string) => {\n    return store.allInspectorProfiles.find(profile => profile.email === email);\n  };\n\n  // Remove inspector profile when account is deleted\n  const removeInspectorProfile = (userEmail: string) => {\n    console.log('removeInspectorProfile called for userEmail:', userEmail);\n    \n    // Direct localStorage manipulation to ensure persistence\n    try {\n      const currentData = localStorage.getItem(STORAGE_KEY);\n      const parsed = currentData ? JSON.parse(currentData) : { requests: [], inspectorProfile: DEFAULT_INSPECTOR_PROFILE, allInspectorProfiles: [] };\n      \n      console.log('removeInspectorProfile - All profile emails:', parsed.allInspectorProfiles.map((p: InspectorProfile) => p.email));\n      console.log('removeInspectorProfile - Looking for userEmail:', userEmail);\n      \n      // Remove the inspector profile\n      const updatedProfiles = parsed.allInspectorProfiles.filter((profile: InspectorProfile) => {\n        const shouldKeep = profile.email !== userEmail;\n        console.log(`removeInspectorProfile - Profile ${profile.email}: ${shouldKeep ? 'KEEP' : 'REMOVE'}`);\n        return shouldKeep;\n      });\n      \n      console.log('removeInspectorProfile - Profiles before:', parsed.allInspectorProfiles.length);\n      console.log('removeInspectorProfile - Profiles after:', updatedProfiles.length);\n      \n      const updatedData = {\n        ...parsed,\n        allInspectorProfiles: updatedProfiles\n      };\n      \n      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedData));\n      console.log('removeInspectorProfile - Direct localStorage save successful');\n      \n      // Force React to re-read from localStorage\n      setStore(updatedData);\n      console.log('removeInspectorProfile - Forced store update');\n      \n      // Trigger storage event to refresh the inspectors page\n      setTimeout(() => {\n        window.dispatchEvent(new Event('storage'));\n      }, 100);\n      \n    } catch (error) {\n      console.error('removeInspectorProfile - localStorage backup failed:', error);\n    }\n  };\n\n  const getRequestById = (id: string) => {\n    return store.requests.find(req => req.id === id);\n  };\n\n  const getMyInterests = () => {\n    return store.requests.filter(req => \n      req.interestedInspectorEmails?.includes(store.inspectorProfile.email)\n    );\n  };\n\n  // Create booking request from time slot\n  const createBookingFromTimeSlot = (\n    timeSlotId: string,\n    inspectorId: string,\n    clientData: {\n      name: string;\n      email: string;\n      phone: string;\n      address: string;\n      cityZip: string;\n      propertyType: 'House' | 'Townhome' | 'Condo';\n      beds: number;\n      baths: number;\n      sqft?: number;\n      notes?: string;\n    }\n  ) => {\n    // Find the inspector and time slot\n    const inspector = getInspectorProfileByEmail(inspectorId);\n    const timeSlot = inspector?.availability?.timeSlots?.find((slot: any) => slot.id === timeSlotId);\n    \n    if (!inspector || !timeSlot) {\n      throw new Error('Inspector or time slot not found');\n    }\n\n\n    // Create the request\n    const newRequest: Request = {\n      id: `req_${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      status: 'open',\n      type: 'client_request',\n      targetInspectorEmail: inspectorId,\n      client: {\n        name: clientData.name,\n        email: clientData.email,\n        phone: clientData.phone\n      },\n      property: {\n        address: clientData.address,\n        cityZip: clientData.cityZip,\n        type: clientData.propertyType,\n        beds: clientData.beds,\n        baths: clientData.baths,\n        sqft: clientData.sqft\n      },\n      schedule: {\n        preferredDate: `${timeSlot.date} ${timeSlot.startTime}-${timeSlot.endTime}`\n      },\n      notes: clientData.notes || `Booking request for ${timeSlot.date} ${timeSlot.startTime}-${timeSlot.endTime}`,\n      interestCount: 1,\n      interestedInspectorEmails: [inspectorId]\n    };\n\n    // Add the request using shared storage (same method as open requests)\n    try {\n      const currentRequests = localStorage.getItem(SHARED_REQUESTS_KEY);\n      const existingRequests = currentRequests ? JSON.parse(currentRequests) : [];\n      const updatedRequests = [newRequest, ...existingRequests];\n      localStorage.setItem(SHARED_REQUESTS_KEY, JSON.stringify(updatedRequests));\n      \n      // Update state\n      setStore(prev => ({\n        ...prev,\n        requests: updatedRequests\n      }));\n    } catch (error) {\n      console.error('Error saving client request:', error);\n      // Fallback to regular state update\n      setStore(prev => ({\n        ...prev,\n        requests: [newRequest, ...prev.requests]\n      }));\n    }\n\n    // Mark time slot as unavailable\n    setStore(prev => ({\n      ...prev,\n      allInspectorProfiles: prev.allInspectorProfiles.map(profile => {\n        if (profile.email === inspectorId && profile.availability?.timeSlots) {\n          return {\n            ...profile,\n            availability: {\n              ...profile.availability,\n              timeSlots: profile.availability.timeSlots.map(slot =>\n                slot.id === timeSlotId ? { ...slot, available: false } : slot\n              )\n            }\n          };\n        }\n        return profile;\n      })\n    }));\n\n    return newRequest.id;\n  };\n\n  // Create open request (not tied to specific inspector)\n  const createOpenRequest = (clientData: {\n    name: string;\n    email: string;\n    phone: string;\n    address: string;\n    cityZip: string;\n    propertyType: 'House' | 'Townhome' | 'Condo';\n    beds: number;\n    baths: number;\n    sqft?: number;\n    preferredDate: string;\n    altDate?: string;\n    budget?: number;\n    notes?: string;\n  }) => {\n    const newRequest: Request = {\n      id: `req_${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      status: 'open',\n      type: 'open_request', // This is an open request for all inspectors\n      client: {\n        name: clientData.name,\n        email: clientData.email,\n        phone: clientData.phone\n      },\n      property: {\n        address: clientData.address,\n        cityZip: clientData.cityZip,\n        type: clientData.propertyType,\n        beds: clientData.beds,\n        baths: clientData.baths,\n        sqft: clientData.sqft\n      },\n      schedule: {\n        preferredDate: clientData.preferredDate,\n        altDate: clientData.altDate\n      },\n      budget: clientData.budget,\n      notes: clientData.notes || '',\n      interestCount: 0,\n      interestedInspectorEmails: []\n    };\n\n    // Add the request\n    setStore(prev => ({\n      ...prev,\n      requests: [newRequest, ...prev.requests]\n    }));\n\n    return newRequest.id;\n  };\n\n  // Get requests created by a specific client (by email)\n  const getClientRequests = (clientEmail: string) => {\n    // Show ALL requests created by this client (both open_request and client_request types)\n    return store.requests.filter(req => \n      req.client.email === clientEmail && \n      (req.type === 'open_request' || req.type === 'client_request')\n    );\n  };\n\n  // Update a request (only if it belongs to the client)\n  const updateRequest = (requestId: string, clientEmail: string, updates: Partial<Omit<Request, 'id' | 'createdAt'>>) => {\n    const request = store.requests.find(r => r.id === requestId);\n    if (!request || request.client.email !== clientEmail) {\n      throw new Error('Request not found or unauthorized');\n    }\n\n    // Update in shared localStorage first\n    try {\n      const currentRequests = localStorage.getItem(SHARED_REQUESTS_KEY);\n      const existingRequests = currentRequests ? JSON.parse(currentRequests) : [];\n      const updatedRequests = existingRequests.map((req: any) =>\n        req.id === requestId ? { ...req, ...updates } : req\n      );\n      localStorage.setItem(SHARED_REQUESTS_KEY, JSON.stringify(updatedRequests));\n      \n      // Update React state to match localStorage\n      setStore(prev => ({\n        ...prev,\n        requests: updatedRequests\n      }));\n    } catch (error) {\n      console.error('Error updating request in localStorage:', error);\n      // Fallback to state-only update\n      setStore(prev => ({\n        ...prev,\n        requests: prev.requests.map(req =>\n          req.id === requestId ? { ...req, ...updates } : req\n        )\n      }));\n    }\n  };\n\n  // Delete a request (only if it belongs to the client)\n  const deleteRequest = (requestId: string, clientEmail: string) => {\n    const request = store.requests.find(r => r.id === requestId);\n    if (!request || request.client.email !== clientEmail) {\n      throw new Error('Request not found or unauthorized');\n    }\n\n    // Remove from shared localStorage first\n    try {\n      const currentRequests = localStorage.getItem(SHARED_REQUESTS_KEY);\n      const existingRequests = currentRequests ? JSON.parse(currentRequests) : [];\n      const updatedRequests = existingRequests.filter((req: any) => req.id !== requestId);\n      localStorage.setItem(SHARED_REQUESTS_KEY, JSON.stringify(updatedRequests));\n      \n      // Update React state to match localStorage\n      setStore(prev => ({\n        ...prev,\n        requests: updatedRequests\n      }));\n    } catch (error) {\n      console.error('Error deleting request from localStorage:', error);\n      // Fallback to state-only update\n      setStore(prev => ({\n        ...prev,\n        requests: prev.requests.filter(req => req.id !== requestId)\n      }));\n    }\n\n    // If it was a client_request, mark the time slot as available again\n    if (request.type === 'client_request' && request.targetInspectorEmail) {\n      setStore(prev => ({\n        ...prev,\n        allInspectorProfiles: prev.allInspectorProfiles.map(profile => {\n          if (profile.email === request.targetInspectorEmail && profile.availability?.timeSlots) {\n            return {\n              ...profile,\n              availability: {\n                ...profile.availability,\n                timeSlots: profile.availability.timeSlots.map(slot => {\n                  // Check if this slot matches the request's preferred date/time\n                  const preferredDateTime = request.schedule.preferredDate;\n                  const slotDateTime = `${slot.date} ${slot.startTime}-${slot.endTime}`;\n                  return slotDateTime === preferredDateTime ? { ...slot, available: true } : slot;\n                })\n              }\n            };\n          }\n          return profile;\n        })\n      }));\n    }\n  };\n\n  return {\n    requests: store.requests,\n    inspectorProfile: store.inspectorProfile,\n    allInspectorProfiles: store.allInspectorProfiles,\n    addRequest,\n    toggleInterest,\n    updateInspectorProfile,\n    setCurrentInspectorProfile,\n    addInspectorProfile,\n    getAllInspectorProfiles,\n    getInspectorProfileByEmail,\n    removeInspectorProfile,\n    getRequestById,\n    getMyInterests,\n    clearAllData,\n    createBookingFromTimeSlot,\n    createOpenRequest,\n    getClientRequests,\n    updateRequest,\n    deleteRequest,\n    debugLocalStorage\n  };\n}","size_bytes":22282},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/data/mockInspectors.ts":{"content":"export interface Inspector {\n  id: string;\n  name: string;\n  location: string;\n  rating: number;\n  reviewCount: number;\n  verified: boolean;\n  yearsExperience: number;\n  specialties: string[];\n  serviceAreas: string[];\n  basePrice: number;\n  availability: {\n    nextAvailable: string;\n    responseTime: string;\n  };\n  contact: {\n    phone: string;\n    email: string;\n    website?: string;\n  };\n  image: string;\n  bio: string;\n  certifications: string[];\n  insurance: string;\n  completedInspections: number;\n}\n\nexport const mockInspectors: { inspectors: Inspector[] } = {\n  inspectors: [\n    {\n      id: \"inspector_demo\",\n      name: \"Demo Inspector\",\n      location: \"San Francisco, CA\",\n      rating: 4.9,\n      reviewCount: 127,\n      verified: true,\n      yearsExperience: 8,\n      specialties: [\"Foundation\", \"Electrical\", \"Plumbing\", \"HVAC\"],\n      serviceAreas: [\"San Francisco\", \"Oakland\", \"San Jose\", \"Palo Alto\"],\n      basePrice: 400,\n      availability: {\n        nextAvailable: \"Tomorrow\",\n        responseTime: \"Within 2 hours\"\n      },\n      contact: {\n        phone: \"(415) 555-0987\",\n        email: \"demo@inspectpro.com\",\n        website: \"www.inspectpro.com\"\n      },\n      image: \"https://images.unsplash.com/photo-1560250097-0b93528c311a?w=400&h=400&fit=crop&crop=face\",\n      bio: \"Certified home inspector with 8+ years of experience serving the Bay Area. Specializing in older homes and modern construction.\",\n      certifications: [\"ASHI Certified\", \"InterNACHI Certified\", \"California Licensed\"],\n      insurance: \"$2M General Liability\",\n      completedInspections: 1200\n    },\n    {\n      id: \"insp_001\",\n      name: \"Marcus Rodriguez\",\n      location: \"San Francisco, CA\",\n      rating: 4.8,\n      reviewCount: 89,\n      verified: true,\n      yearsExperience: 6,\n      specialties: [\"Structural\", \"Electrical\", \"Roofing\"],\n      serviceAreas: [\"San Francisco\", \"Daly City\", \"South Bay\"],\n      basePrice: 375,\n      availability: {\n        nextAvailable: \"This week\",\n        responseTime: \"Within 4 hours\"\n      },\n      contact: {\n        phone: \"(415) 555-0234\",\n        email: \"marcus@bayareainspect.com\"\n      },\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face\",\n      bio: \"Experienced inspector with a background in construction. Known for detailed reports and excellent communication.\",\n      certifications: [\"ASHI Member\", \"California Licensed\"],\n      insurance: \"$1M Professional Liability\",\n      completedInspections: 850\n    },\n    {\n      id: \"insp_002\",\n      name: \"Jennifer Chen\",\n      location: \"Oakland, CA\", \n      rating: 4.7,\n      reviewCount: 156,\n      verified: true,\n      yearsExperience: 10,\n      specialties: [\"Environmental\", \"Mold\", \"Energy Efficiency\"],\n      serviceAreas: [\"Oakland\", \"Berkeley\", \"Fremont\", \"San Francisco\"],\n      basePrice: 425,\n      availability: {\n        nextAvailable: \"Next week\",\n        responseTime: \"Same day\"\n      },\n      contact: {\n        phone: \"(510) 555-0345\",\n        email: \"jen@greenhomeinspect.com\",\n        website: \"www.greenhomeinspect.com\"\n      },\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b612b9e3?w=400&h=400&fit=crop&crop=face\",\n      bio: \"Environmental specialist focusing on healthy homes. Expert in mold detection and energy efficiency assessments.\",\n      certifications: [\"InterNACHI Certified\", \"Mold Inspector Certified\", \"Energy Auditor\"],\n      insurance: \"$2M Comprehensive Coverage\",\n      completedInspections: 1450\n    },\n    {\n      id: \"insp_003\",\n      name: \"David Thompson\",\n      location: \"San Jose, CA\",\n      rating: 4.9,\n      reviewCount: 203,\n      verified: true,\n      yearsExperience: 12,\n      specialties: [\"Commercial\", \"Luxury Homes\", \"Pool & Spa\"],\n      serviceAreas: [\"San Jose\", \"Santa Clara\", \"Sunnyvale\", \"Palo Alto\"],\n      basePrice: 450,\n      availability: {\n        nextAvailable: \"This week\",\n        responseTime: \"Within 1 hour\"\n      },\n      contact: {\n        phone: \"(408) 555-0456\",\n        email: \"david@premiumhomeinspect.com\",\n        website: \"www.premiumhomeinspect.com\"\n      },\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face\",\n      bio: \"Premium inspector specializing in luxury properties and commercial buildings. Known for comprehensive reports.\",\n      certifications: [\"Master Inspector\", \"Pool/Spa Inspector\", \"Commercial Certified\"],\n      insurance: \"$5M Commercial Coverage\",\n      completedInspections: 2100\n    },\n    {\n      id: \"insp_004\",\n      name: \"Lisa Park\",\n      location: \"Palo Alto, CA\",\n      rating: 4.6,\n      reviewCount: 74,\n      verified: true,\n      yearsExperience: 5,\n      specialties: [\"New Construction\", \"Technology Systems\", \"Smart Homes\"],\n      serviceAreas: [\"Palo Alto\", \"Mountain View\", \"Menlo Park\", \"San Francisco\"],\n      basePrice: 390,\n      availability: {\n        nextAvailable: \"Tomorrow\",\n        responseTime: \"Within 3 hours\"\n      },\n      contact: {\n        phone: \"(650) 555-0567\",\n        email: \"lisa@techhomeinspect.com\"\n      },\n      image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face\",\n      bio: \"Technology-focused inspector specializing in smart home systems and new construction in Silicon Valley.\",\n      certifications: [\"InterNACHI Certified\", \"Smart Home Specialist\"],\n      insurance: \"$1.5M Professional Liability\",\n      completedInspections: 620\n    },\n    {\n      id: \"insp_005\",\n      name: \"Robert Kim\",\n      location: \"San Francisco, CA\",\n      rating: 4.8,\n      reviewCount: 134,\n      verified: true,\n      yearsExperience: 9,\n      specialties: [\"Historic Homes\", \"Seismic Safety\", \"Foundation\"],\n      serviceAreas: [\"San Francisco\", \"Marin County\", \"Oakland\"],\n      basePrice: 475,\n      availability: {\n        nextAvailable: \"Next week\",\n        responseTime: \"Within 2 hours\"\n      },\n      contact: {\n        phone: \"(415) 555-0678\",\n        email: \"robert@heritageinspect.com\",\n        website: \"www.heritageinspect.com\"\n      },\n      image: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face\",\n      bio: \"Specialist in historic and vintage homes. Expert in seismic retrofitting and foundation assessments.\",\n      certifications: [\"ASHI Certified\", \"Seismic Safety Inspector\", \"Historic Preservation\"],\n      insurance: \"$3M Specialty Coverage\",\n      completedInspections: 1100\n    }\n  ]\n};","size_bytes":6492},"client/src/components/AvailabilityManager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocalStore } from '@/store/localStore';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { CalendarIcon, Clock, Plus, Trash2, Edit } from 'lucide-react';\nimport { format } from 'date-fns';\n\nconst timeSlotSchema = z.object({\n  date: z.date({\n    required_error: \"Please select a date.\",\n  }),\n  startHour: z.string().min(1, 'Start hour is required'),\n  startPeriod: z.enum(['AM', 'PM']),\n  endHour: z.string().min(1, 'End hour is required'),\n  endPeriod: z.enum(['AM', 'PM']),\n  repeat: z.enum(['none', 'daily', 'weekly', 'biweekly', 'monthly']),\n  endDate: z.date().optional()\n});\n\ntype TimeSlotFormData = z.infer<typeof timeSlotSchema>;\n\nexport function AvailabilityManager() {\n  const { inspectorProfile, updateInspectorProfile } = useLocalStore();\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingSlot, setEditingSlot] = useState<string | null>(null);\n  const [clearAllDialogOpen, setClearAllDialogOpen] = useState(false);\n\n  const form = useForm<TimeSlotFormData>({\n    resolver: zodResolver(timeSlotSchema),\n    defaultValues: {\n      date: undefined,\n      startHour: '',\n      startPeriod: 'AM',\n      endHour: '',\n      endPeriod: 'AM',\n      repeat: 'none',\n      endDate: undefined\n    }\n  });\n\n  const timeSlots = inspectorProfile.availability?.timeSlots || [];\n\n  const convertTo24Hour = (hour: string, period: 'AM' | 'PM') => {\n    const hourNum = parseInt(hour);\n    if (period === 'AM') {\n      return hourNum === 12 ? '00:00' : `${hourNum.toString().padStart(2, '0')}:00`;\n    } else {\n      return hourNum === 12 ? '12:00' : `${(hourNum + 12).toString().padStart(2, '0')}:00`;\n    }\n  };\n\n  const convertTo12Hour = (time: string) => {\n    const [hour, minute] = time.split(':');\n    const hourNum = parseInt(hour);\n    if (hourNum === 0) return { hour: '12', period: 'AM' };\n    if (hourNum < 12) return { hour: hourNum.toString(), period: 'AM' };\n    if (hourNum === 12) return { hour: '12', period: 'PM' };\n    return { hour: (hourNum - 12).toString(), period: 'PM' };\n  };\n\n  const generateRecurringSlots = (data: TimeSlotFormData) => {\n    const startTime = convertTo24Hour(data.startHour, data.startPeriod);\n    const endTime = convertTo24Hour(data.endHour, data.endPeriod);\n    const slots = [];\n    \n    let currentDate = new Date(data.date);\n    const endDate = data.endDate || new Date(Date.now() + 90 * 24 * 60 * 60 * 1000); // Default 3 months\n    \n    while (currentDate <= endDate) {\n      slots.push({\n        id: `slot_${Date.now()}_${currentDate.getTime()}`,\n        date: format(currentDate, 'yyyy-MM-dd'),\n        startTime,\n        endTime,\n        available: true\n      });\n      \n      // Calculate next occurrence based on repeat type\n      switch (data.repeat) {\n        case 'daily':\n          currentDate.setDate(currentDate.getDate() + 1);\n          break;\n        case 'weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'biweekly':\n          currentDate.setDate(currentDate.getDate() + 14);\n          break;\n        case 'monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          break;\n        default:\n          // 'none' - only create one slot\n          break;\n      }\n      \n      // Prevent infinite loop for 'none' repeat\n      if (data.repeat === 'none') break;\n    }\n    \n    return slots;\n  };\n\n  const addTimeSlot = (data: TimeSlotFormData) => {\n    const newSlots = generateRecurringSlots(data);\n    const updatedTimeSlots = [...timeSlots, ...newSlots];\n    \n    updateInspectorProfile({\n      availability: {\n        ...inspectorProfile.availability,\n        nextAvailable: inspectorProfile.availability?.nextAvailable || 'This week',\n        responseTime: inspectorProfile.availability?.responseTime || 'Within 4 hours',\n        timeSlots: updatedTimeSlots\n      }\n    });\n\n    const slotCount = newSlots.length;\n    toast({\n      title: slotCount > 1 ? \"Recurring Time Slots Added\" : \"Time Slot Added\",\n      description: slotCount > 1 \n        ? `Added ${slotCount} ${data.repeat} slots starting ${format(data.date, 'MMM dd, yyyy')}`\n        : `Added ${format(data.date, 'MMM dd, yyyy')} ${data.startHour}:00 ${data.startPeriod}-${data.endHour}:00 ${data.endPeriod}`,\n    });\n\n    form.reset({\n      date: undefined,\n      startHour: '',\n      startPeriod: 'AM',\n      endHour: '',\n      endPeriod: 'AM',\n      repeat: 'none',\n      endDate: undefined\n    });\n    setDialogOpen(false);\n  };\n\n  const removeTimeSlot = (slotId: string) => {\n    const updatedTimeSlots = timeSlots.filter(slot => slot.id !== slotId);\n    \n    updateInspectorProfile({\n      availability: {\n        ...inspectorProfile.availability,\n        nextAvailable: inspectorProfile.availability?.nextAvailable || 'This week',\n        responseTime: inspectorProfile.availability?.responseTime || 'Within 4 hours',\n        timeSlots: updatedTimeSlots\n      }\n    });\n\n    toast({\n      title: \"Time Slot Removed\",\n      description: \"Time slot has been deleted from your availability\",\n    });\n  };\n\n  const toggleSlotAvailability = (slotId: string) => {\n    const updatedTimeSlots = timeSlots.map(slot => \n      slot.id === slotId ? { ...slot, available: !slot.available } : slot\n    );\n    \n    updateInspectorProfile({\n      availability: {\n        ...inspectorProfile.availability,\n        nextAvailable: inspectorProfile.availability?.nextAvailable || 'This week',\n        responseTime: inspectorProfile.availability?.responseTime || 'Within 4 hours',\n        timeSlots: updatedTimeSlots\n      }\n    });\n\n    const slot = timeSlots.find(s => s.id === slotId);\n    toast({\n      title: slot?.available ? \"Slot Made Unavailable\" : \"Slot Made Available\",\n      description: `${slot?.date} ${slot?.startTime}-${slot?.endTime} is now ${slot?.available ? 'unavailable' : 'available'}`,\n    });\n  };\n\n  const clearAllTimeSlots = () => {\n    updateInspectorProfile({\n      availability: {\n        ...inspectorProfile.availability,\n        nextAvailable: inspectorProfile.availability?.nextAvailable || 'This week',\n        responseTime: inspectorProfile.availability?.responseTime || 'Within 4 hours',\n        timeSlots: []\n      }\n    });\n\n    toast({\n      title: \"All Time Slots Cleared\",\n      description: \"All available time slots have been removed.\",\n    });\n\n    setClearAllDialogOpen(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Clock className=\"mr-2 h-5 w-5\" />\n            Availability Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"nextAvailable\">Next Available</Label>\n              <Input\n                id=\"nextAvailable\"\n                value={inspectorProfile.availability?.nextAvailable || 'This week'}\n                onChange={(e) => updateInspectorProfile({\n                  availability: {\n                    ...inspectorProfile.availability,\n                    nextAvailable: e.target.value,\n                    responseTime: inspectorProfile.availability?.responseTime || 'Within 4 hours',\n                    timeSlots: timeSlots\n                  }\n                })}\n                placeholder=\"e.g., This week, Tomorrow\"\n                data-testid=\"input-next-available\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"responseTime\">Response Time</Label>\n              <Input\n                id=\"responseTime\"\n                value={inspectorProfile.availability?.responseTime || 'Within 4 hours'}\n                onChange={(e) => updateInspectorProfile({\n                  availability: {\n                    ...inspectorProfile.availability,\n                    nextAvailable: inspectorProfile.availability?.nextAvailable || 'This week',\n                    responseTime: e.target.value,\n                    timeSlots: timeSlots\n                  }\n                })}\n                placeholder=\"e.g., Within 4 hours, Same day\"\n                data-testid=\"input-response-time\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Time Slots Management */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"flex items-center\">\n              <CalendarIcon className=\"mr-2 h-5 w-5\" />\n              Available Time Slots\n            </CardTitle>\n            <div className=\"flex space-x-2\">\n              {timeSlots.length > 0 && (\n                <AlertDialog open={clearAllDialogOpen} onOpenChange={setClearAllDialogOpen}>\n                  <AlertDialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      className=\"text-red-600 hover:text-red-700 border-red-200 hover:bg-red-50\"\n                      data-testid=\"button-clear-all-slots\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Clear All\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Clear All Time Slots</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        This will permanently delete all {timeSlots.length} time slots from your availability. \n                        This action cannot be undone. Are you sure you want to continue?\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel data-testid=\"button-cancel-clear-all\">\n                        Cancel\n                      </AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={clearAllTimeSlots}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                        data-testid=\"button-confirm-clear-all\"\n                      >\n                        Clear All Slots\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              )}\n              <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-time-slot\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Time Slot\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Time Slot</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(addTimeSlot)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"date\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-col\">\n                          <FormLabel>Date</FormLabel>\n                          <Popover>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant={\"outline\"}\n                                  className={`w-full pl-3 text-left font-normal ${!field.value && \"text-muted-foreground\"}`}\n                                  data-testid=\"button-slot-date\"\n                                >\n                                  {field.value ? (\n                                    format(field.value, \"PPP\")\n                                  ) : (\n                                    <span>Pick a date</span>\n                                  )}\n                                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                              <Calendar\n                                mode=\"single\"\n                                selected={field.value}\n                                onSelect={field.onChange}\n                                disabled={(date) =>\n                                  date < new Date(new Date().setHours(0, 0, 0, 0))\n                                }\n                                initialFocus\n                              />\n                            </PopoverContent>\n                          </Popover>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <FormField\n                          control={form.control}\n                          name=\"startHour\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Start Hour</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-start-hour\">\n                                    <SelectValue placeholder=\"Hour\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {Array.from({ length: 12 }, (_, i) => i + 1).map((hour) => (\n                                    <SelectItem key={hour} value={hour.toString()}>\n                                      {hour}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"startPeriod\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Period</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-start-period\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"AM\">AM</SelectItem>\n                                  <SelectItem value=\"PM\">PM</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <FormField\n                          control={form.control}\n                          name=\"endHour\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>End Hour</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-end-hour\">\n                                    <SelectValue placeholder=\"Hour\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {Array.from({ length: 12 }, (_, i) => i + 1).map((hour) => (\n                                    <SelectItem key={hour} value={hour.toString()}>\n                                      {hour}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"endPeriod\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Period</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-end-period\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"AM\">AM</SelectItem>\n                                  <SelectItem value=\"PM\">PM</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"repeat\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Repeat</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-repeat\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"none\">One time only</SelectItem>\n                                <SelectItem value=\"daily\">Daily</SelectItem>\n                                <SelectItem value=\"weekly\">Weekly</SelectItem>\n                                <SelectItem value=\"biweekly\">Bi-weekly</SelectItem>\n                                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {form.watch('repeat') !== 'none' && (\n                        <FormField\n                          control={form.control}\n                          name=\"endDate\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                              <FormLabel>Repeat Until (Optional)</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant={\"outline\"}\n                                      className={`w-full pl-3 text-left font-normal ${!field.value && \"text-muted-foreground\"}`}\n                                      data-testid=\"button-end-date\"\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Select end date (default: 3 months)</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) =>\n                                      date < new Date(new Date().setHours(0, 0, 0, 0))\n                                    }\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)} data-testid=\"button-cancel-slot\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" data-testid=\"button-save-slot\">Add Time Slot</Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {timeSlots.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CalendarIcon className=\"mx-auto h-12 w-12 text-muted mb-4\" />\n              <h3 className=\"text-lg font-medium text-secondary mb-2\">No time slots available</h3>\n              <p className=\"text-muted mb-4\">Add your available time slots so clients can book directly with you.</p>\n              <Button onClick={() => setDialogOpen(true)} data-testid=\"button-add-first-slot\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Your First Time Slot\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid gap-3\">\n              {timeSlots.map((slot) => (\n                <div\n                  key={slot.id}\n                  className={`flex items-center justify-between p-4 border rounded-lg ${\n                    slot.available \n                      ? 'border-green-200 bg-green-50' \n                      : 'border-gray-200 bg-gray-50'\n                  }`}\n                >\n                  <div className=\"flex items-center\">\n                    <CalendarIcon className=\"h-4 w-4 text-muted mr-3\" />\n                    <div>\n                      <div className=\"font-medium text-secondary\">\n                        {new Date(slot.date).toLocaleDateString('en-US', { \n                          weekday: 'short', \n                          month: 'short', \n                          day: 'numeric' \n                        })}\n                      </div>\n                      <div className=\"text-sm text-muted\">\n                        {(() => {\n                          const start = convertTo12Hour(slot.startTime);\n                          const end = convertTo12Hour(slot.endTime);\n                          return `${start.hour}:00 ${start.period} - ${end.hour}:00 ${end.period}`;\n                        })()}\n                      </div>\n                    </div>\n                    <Badge \n                      variant={slot.available ? \"default\" : \"secondary\"}\n                      className={`ml-3 ${slot.available ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}\n                    >\n                      {slot.available ? 'Available' : 'Unavailable'}\n                    </Badge>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => toggleSlotAvailability(slot.id)}\n                      data-testid={`button-toggle-${slot.id}`}\n                    >\n                      {slot.available ? 'Mark Unavailable' : 'Mark Available'}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => removeTimeSlot(slot.id)}\n                      className=\"text-red-600 hover:text-red-700\"\n                      data-testid={`button-remove-${slot.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":26402},"client/src/pages/MyRequests.tsx":{"content":"import { useState } from 'react';\nimport { Header } from '@/components/header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocalStore } from '@/store/localStore';\nimport { useAuth } from '@/auth/AuthProvider';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Calendar, Home, DollarSign, Clock, Edit2, Trash2, FileText, Heart } from 'lucide-react';\n\nconst updateRequestSchema = z.object({\n  clientName: z.string().min(1, 'Name is required'),\n  clientEmail: z.string().email('Valid email is required'),\n  clientPhone: z.string().optional(),\n  propertyAddress: z.string().min(1, 'Property address is required'),\n  cityZip: z.string().min(1, 'City and ZIP code are required'),\n  preferredDate: z.string().min(1, 'Preferred date is required'),\n  altDate: z.string().optional(),\n  propertyType: z.enum(['House', 'Townhome', 'Condo'], {\n    required_error: 'Property type is required'\n  }),\n  beds: z.number().min(0, 'Beds must be 0 or greater'),\n  baths: z.number().min(0, 'Baths must be 0 or greater'),\n  sqft: z.number().optional(),\n  notes: z.string().optional(),\n  budget: z.number().optional()\n});\n\ntype UpdateRequestData = z.infer<typeof updateRequestSchema>;\n\nexport default function MyRequests() {\n  const { user } = useAuth();\n  const { getClientRequests, updateRequest, deleteRequest } = useLocalStore();\n  const { toast } = useToast();\n  const [editingRequest, setEditingRequest] = useState<string | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState<string | null>(null);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-2xl mx-auto px-4 py-16 text-center\">\n          <p className=\"text-lg text-muted\">Please log in to view your requests.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const myRequests = getClientRequests(user.email);\n\n  const form = useForm<UpdateRequestData>({\n    resolver: zodResolver(updateRequestSchema),\n    defaultValues: {\n      clientName: '',\n      clientEmail: '',\n      clientPhone: '',\n      propertyAddress: '',\n      cityZip: '',\n      preferredDate: '',\n      altDate: '',\n      propertyType: 'House' as const,\n      beds: 0,\n      baths: 0,\n      sqft: 0,\n      notes: '',\n      budget: 0\n    },\n  });\n\n  const handleEdit = (requestId: string) => {\n    const request = myRequests.find(r => r.id === requestId);\n    if (request) {\n      // Convert dates to datetime-local format (YYYY-MM-DDTHH:MM)\n      const formatDateForInput = (dateString: string) => {\n        try {\n          const date = new Date(dateString);\n          if (isNaN(date.getTime())) return '';\n          // Format as YYYY-MM-DDTHH:MM\n          const year = date.getFullYear();\n          const month = String(date.getMonth() + 1).padStart(2, '0');\n          const day = String(date.getDate()).padStart(2, '0');\n          const hours = String(date.getHours()).padStart(2, '0');\n          const minutes = String(date.getMinutes()).padStart(2, '0');\n          return `${year}-${month}-${day}T${hours}:${minutes}`;\n        } catch {\n          return '';\n        }\n      };\n\n      form.reset({\n        clientName: request.client.name,\n        clientEmail: request.client.email,\n        clientPhone: request.client.phone || '',\n        propertyAddress: request.property.address,\n        cityZip: request.property.cityZip,\n        preferredDate: formatDateForInput(request.schedule.preferredDate),\n        altDate: request.schedule.altDate ? formatDateForInput(request.schedule.altDate) : '',\n        propertyType: request.property.type as 'House' | 'Townhome' | 'Condo',\n        beds: request.property.beds,\n        baths: request.property.baths,\n        sqft: request.property.sqft || 0,\n        notes: request.notes || '',\n        budget: request.budget || 0\n      });\n      setEditingRequest(requestId);\n    }\n  };\n\n  const onSubmitUpdate = async (data: UpdateRequestData) => {\n    if (!editingRequest) return;\n\n    try {\n      updateRequest(editingRequest, user.email, {\n        client: {\n          name: data.clientName,\n          email: data.clientEmail,\n          phone: data.clientPhone || ''\n        },\n        property: {\n          address: data.propertyAddress,\n          cityZip: data.cityZip,\n          type: data.propertyType,\n          beds: data.beds,\n          baths: data.baths,\n          sqft: data.sqft || undefined\n        },\n        schedule: {\n          preferredDate: data.preferredDate,\n          altDate: data.altDate || undefined,\n        },\n        budget: data.budget || undefined,\n        notes: data.notes || '',\n      });\n\n      toast({\n        title: \"Request Updated\",\n        description: \"Your inspection request has been updated successfully.\",\n      });\n\n      setEditingRequest(null);\n      form.reset();\n    } catch (error) {\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update request\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDelete = async (requestId: string) => {\n    try {\n      deleteRequest(requestId, user.email);\n      \n      toast({\n        title: \"Request Deleted\",\n        description: \"Your inspection request has been deleted successfully.\",\n      });\n\n      setDeleteDialogOpen(null);\n    } catch (error) {\n      toast({\n        title: \"Delete Failed\", \n        description: error instanceof Error ? error.message : \"Failed to delete request\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-secondary mb-2 flex items-center\" data-testid=\"text-my-requests-title\">\n            <FileText className=\"mr-3 h-8 w-8\" />\n            My Requests\n          </h1>\n          <p className=\"text-muted\" data-testid=\"text-my-requests-subtitle\">\n            View, edit, and manage your inspection requests\n          </p>\n        </div>\n\n        {/* Requests List */}\n        {myRequests.length === 0 ? (\n          <Card className=\"bg-white rounded-xl shadow-lg\">\n            <CardContent className=\"p-12 text-center\">\n              <FileText className=\"mx-auto h-16 w-16 text-muted mb-4\" />\n              <h3 className=\"text-xl font-semibold text-secondary mb-2\">No Requests Yet</h3>\n              <p className=\"text-muted mb-6\">You haven't posted any inspection requests yet.</p>\n              <Button onClick={() => window.location.href = '/inspectors'} data-testid=\"button-find-inspectors\">\n                Find Inspectors\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {myRequests.map((request) => (\n              <Card key={request.id} className=\"bg-white rounded-xl shadow-lg\" data-testid={`card-my-request-${request.id}`}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <CardTitle className=\"text-xl\">{request.property.cityZip}</CardTitle>\n                        <Badge \n                          className={`text-xs ${\n                            request.type === 'client_request' \n                              ? 'bg-blue-100 text-blue-800' \n                              : 'bg-purple-100 text-purple-800'\n                          }`}\n                        >\n                          {request.type === 'client_request' ? 'Client Request' : 'Open Request'}\n                        </Badge>\n                        <Badge \n                          className={`text-xs ${\n                            request.status === 'open' \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-gray-100 text-gray-600'\n                          }`}\n                        >\n                          {request.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted\">\n                        Created {new Date(request.createdAt).toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric' \n                        })}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Dialog open={editingRequest === request.id} onOpenChange={(open) => !open && setEditingRequest(null)}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleEdit(request.id)}\n                            data-testid={`button-edit-${request.id}`}\n                          >\n                            <Edit2 className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Edit Request</DialogTitle>\n                          </DialogHeader>\n                          <Form {...form}>\n                            <form onSubmit={form.handleSubmit(onSubmitUpdate)} className=\"space-y-4\">\n                              {/* Client Information */}\n                              <div className=\"grid md:grid-cols-2 gap-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"clientName\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Your Name</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} data-testid=\"input-edit-client-name\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"clientEmail\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Email</FormLabel>\n                                      <FormControl>\n                                        <Input type=\"email\" {...field} data-testid=\"input-edit-client-email\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <FormField\n                                control={form.control}\n                                name=\"clientPhone\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Phone (Optional)</FormLabel>\n                                    <FormControl>\n                                      <Input type=\"tel\" {...field} data-testid=\"input-edit-client-phone\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n\n                              {/* Property Information */}\n                              <div className=\"space-y-4\">\n                                <h3 className=\"text-lg font-semibold text-secondary\">Property Details</h3>\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"propertyAddress\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Property Address</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} data-testid=\"input-edit-property-address\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={form.control}\n                                  name=\"cityZip\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>City, State ZIP</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} data-testid=\"input-edit-city-zip\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <div className=\"grid md:grid-cols-2 gap-4\">\n                                  <FormField\n                                    control={form.control}\n                                    name=\"propertyType\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Property Type</FormLabel>\n                                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                          <FormControl>\n                                            <SelectTrigger data-testid=\"select-edit-property-type\">\n                                              <SelectValue placeholder=\"Select property type\" />\n                                            </SelectTrigger>\n                                          </FormControl>\n                                          <SelectContent>\n                                            <SelectItem value=\"House\">Single Family House</SelectItem>\n                                            <SelectItem value=\"Townhome\">Townhome</SelectItem>\n                                            <SelectItem value=\"Condo\">Condominium</SelectItem>\n                                          </SelectContent>\n                                        </Select>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name=\"sqft\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Square Feet (Optional)</FormLabel>\n                                        <FormControl>\n                                          <Input \n                                            type=\"number\" \n                                            {...field} \n                                            value={field.value || ''} \n                                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                            data-testid=\"input-edit-sqft\" \n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <FormField\n                                    control={form.control}\n                                    name=\"beds\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Bedrooms</FormLabel>\n                                        <FormControl>\n                                          <Input \n                                            type=\"number\" \n                                            min=\"0\" \n                                            {...field} \n                                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                            data-testid=\"input-edit-beds\" \n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name=\"baths\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Bathrooms</FormLabel>\n                                        <FormControl>\n                                          <Input \n                                            type=\"number\" \n                                            min=\"0\" \n                                            step=\"0.5\" \n                                            {...field} \n                                            onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                            data-testid=\"input-edit-baths\" \n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n                              </div>\n\n                              {/* Scheduling */}\n                              <div className=\"space-y-4\">\n                                <h3 className=\"text-lg font-semibold text-secondary\">Inspection Schedule</h3>\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"preferredDate\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Preferred Date & Time</FormLabel>\n                                      <FormControl>\n                                        <Input type=\"datetime-local\" {...field} data-testid=\"input-edit-preferred-date\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                \n                                <FormField\n                                  control={form.control}\n                                  name=\"altDate\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Alternative Date & Time (Optional)</FormLabel>\n                                      <FormControl>\n                                        <Input type=\"datetime-local\" {...field} data-testid=\"input-edit-alt-date\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              {/* Additional Details */}\n                              <div className=\"space-y-4\">\n                                <FormField\n                                  control={form.control}\n                                  name=\"budget\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Budget (Optional)</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          placeholder=\"500\" \n                                          {...field} \n                                          value={field.value || ''} \n                                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                          data-testid=\"input-edit-budget\" \n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <FormField\n                                  control={form.control}\n                                  name=\"notes\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Additional Notes (Optional)</FormLabel>\n                                      <FormControl>\n                                        <Textarea \n                                          placeholder=\"Any specific concerns, areas of focus, or special requirements...\"\n                                          className=\"resize-none\"\n                                          rows={3}\n                                          {...field}\n                                          data-testid=\"textarea-edit-notes\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n\n                              <div className=\"flex justify-end space-x-2\">\n                                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingRequest(null)}>\n                                  Cancel\n                                </Button>\n                                <Button type=\"submit\" data-testid=\"button-save-changes\">\n                                  Save Changes\n                                </Button>\n                              </div>\n                            </form>\n                          </Form>\n                        </DialogContent>\n                      </Dialog>\n\n                      <AlertDialog open={deleteDialogOpen === request.id} onOpenChange={(open) => !open && setDeleteDialogOpen(null)}>\n                        <AlertDialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-700 border-red-200 hover:bg-red-50\"\n                            onClick={() => setDeleteDialogOpen(request.id)}\n                            data-testid={`button-delete-${request.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Request</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete this inspection request? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDelete(request.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                              data-testid=\"button-confirm-delete\"\n                            >\n                              Delete Request\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <div className=\"grid md:grid-cols-2 gap-4 mb-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center text-sm text-muted\">\n                        <Home className=\"w-4 h-4 mr-2\" />\n                        <span>{request.property.type} • {request.property.beds}bd/{request.property.baths}ba</span>\n                        {request.property.sqft && <span> • {request.property.sqft} sqft</span>}\n                      </div>\n                      \n                      <div className=\"flex items-center text-sm text-muted\">\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        <span>\n                          Preferred: {new Date(request.schedule.preferredDate).toLocaleDateString('en-US', { \n                            month: 'short', \n                            day: 'numeric', \n                            year: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </span>\n                      </div>\n\n                      {request.schedule.altDate && (\n                        <div className=\"flex items-center text-sm text-muted\">\n                          <Clock className=\"w-4 h-4 mr-2\" />\n                          <span>\n                            Alt: {new Date(request.schedule.altDate).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric', \n                              year: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {request.budget && (\n                        <div className=\"flex items-center text-sm text-muted\">\n                          <DollarSign className=\"w-4 h-4 mr-2\" />\n                          <span>Budget: ${request.budget}</span>\n                        </div>\n                      )}\n\n                      {request.interestCount > 0 && (\n                        <div className=\"flex items-center text-sm text-muted\">\n                          <Heart className=\"w-4 h-4 mr-2 fill-red-500 text-red-500\" />\n                          <span>{request.interestCount} inspector{request.interestCount !== 1 ? 's' : ''} interested</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {request.notes && (\n                    <div className=\"border-t pt-3\">\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Notes: </span>\n                        {request.notes}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":29329}},"version":1}